'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = connectFactory;

var _objectReduce = require('fast-loops/lib/objectReduce');

var _objectReduce2 = _interopRequireDefault(_objectReduce);

var _objectEach = require('fast-loops/lib/objectEach');

var _objectEach2 = _interopRequireDefault(_objectEach);

var _felaTools = require('fela-tools');

var _reactAddonsShallowCompare = require('react-addons-shallow-compare');

var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);

var _generateDisplayName = require('./generateDisplayName');

var _generateDisplayName2 = _interopRequireDefault(_generateDisplayName);

var _generateSelectorPrefix = require('./generateSelectorPrefix');

var _generateSelectorPrefix2 = _interopRequireDefault(_generateSelectorPrefix);

var _hoistStatics = require('./hoistStatics');

var _hoistStatics2 = _interopRequireDefault(_hoistStatics);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultConfig = {
  pure: true
};

function connectFactory(BaseComponent, createElement, RendererContext, ThemeContext) {
  return function connect(rules) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var connectConfig = _extends({}, defaultConfig, config);

    return function (component) {
      var EnhancedComponent = function (_BaseComponent) {
        _inherits(EnhancedComponent, _BaseComponent);

        function EnhancedComponent() {
          _classCallCheck(this, EnhancedComponent);

          return _possibleConstructorReturn(this, (EnhancedComponent.__proto__ || Object.getPrototypeOf(EnhancedComponent)).apply(this, arguments));
        }

        _createClass(EnhancedComponent, [{
          key: 'shouldComponentUpdate',
          value: function shouldComponentUpdate(nextProps, nextState) {
            if (connectConfig.pure) {
              return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
            }
            return true;
          }
        }, {
          key: 'render',
          value: function render() {
            var _props = this.props,
                extend = _props.extend,
                _felaRules = _props._felaRules,
                otherProps = _objectWithoutProperties(_props, ['extend', '_felaRules']);

            var allRules = [rules];
            if (_felaRules) {
              allRules.push(_felaRules);
            }
            if (extend) {
              allRules.push(extend);
            }

            var combinedRules = _felaTools.combineMultiRules.apply(undefined, allRules);

            return createElement(RendererContext.Consumer, undefined, function (renderer) {
              return createElement(ThemeContext.Consumer, undefined, function (theme) {
                var preparedRules = combinedRules(_extends({}, otherProps, {
                  theme: theme
                }), renderer);

                // improve developer experience with monolithic renderer
                if (process.env.NODE_ENV !== 'production' && renderer.prettySelectors) {
                  var componentName = component.displayName || component.name || '';

                  (0, _objectEach2.default)(preparedRules, function (rule, name) {
                    rule.selectorPrefix = (0, _generateSelectorPrefix2.default)(componentName, name);
                  });
                }

                if (component._isFelaComponent) {
                  return createElement(component, _extends({
                    _felaRules: combinedRules
                  }, otherProps));
                }

                var styles = (0, _objectReduce2.default)(preparedRules, function (styleMap, rule, name) {
                  styleMap[name] = renderer.renderRule(rule, _extends({}, otherProps, {
                    theme: theme
                  }));

                  return styleMap;
                }, {});

                var boundRules = (0, _objectReduce2.default)(preparedRules, function (ruleMap, rule, name) {
                  ruleMap[name] = function (props) {
                    return rule(_extends({
                      theme: theme
                    }, props), renderer);
                  };

                  return ruleMap;
                }, {});

                return createElement(component, _extends({}, otherProps, {
                  styles: styles,
                  theme: theme,
                  rules: boundRules
                }));
              });
            });
          }
        }]);

        return EnhancedComponent;
      }(BaseComponent);

      EnhancedComponent.displayName = (0, _generateDisplayName2.default)(component);
      EnhancedComponent._isFelaComponent = true;


      return (0, _hoistStatics2.default)(EnhancedComponent, component);
    };
  };
}