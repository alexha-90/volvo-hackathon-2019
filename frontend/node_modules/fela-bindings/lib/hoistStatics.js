'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = hoistStatics;

var _arrayEach = require('fast-loops/lib/arrayEach');

var _arrayEach2 = _interopRequireDefault(_arrayEach);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var basicStatics = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};

var mergableStatics = ['contextTypes', 'defaultProps'];
var blockedStatics = {
  childContextTypes: true,
  propTypes: true,
  getDerivedStateFromProps: true,
  contextType: true
};

function hoistStatics(target, source) {
  if (typeof source === 'string') {
    return target;
  }

  var statics = Object.getOwnPropertyNames(source).filter(function (property) {
    return !basicStatics[property];
  });

  (0, _arrayEach2.default)(statics, function (property) {
    if (!target.hasOwnProperty(property) && !blockedStatics[property]) {
      try {
        // Avoid failures from read-only properties
        var descriptor = Object.getOwnPropertyDescriptor(source, property);

        if (descriptor) {
          Object.defineProperty(target, property, descriptor);
        }
      } catch (e) {
        // TODO: warning
      }
    }
  });

  (0, _arrayEach2.default)(mergableStatics, function (property) {
    if (source[property]) {
      var targetStatics = target[property] || {};

      target[property] = _extends({}, source[property], targetStatics);
    }
  });

  return target;
}