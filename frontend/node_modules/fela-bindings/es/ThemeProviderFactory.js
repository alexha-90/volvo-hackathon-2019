var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

export default function ThemeProviderFactory(ThemeContext, createElement, renderChildren) {
  return function ThemeProvider(_ref) {
    var _ref$theme = _ref.theme,
        theme = _ref$theme === undefined ? {} : _ref$theme,
        _ref$overwrite = _ref.overwrite,
        overwrite = _ref$overwrite === undefined ? false : _ref$overwrite,
        children = _ref.children;

    return createElement(ThemeContext.Consumer, null, function (previousTheme) {
      return createElement(ThemeContext.Provider, {
        value: !overwrite && previousTheme ? _extends({}, previousTheme, theme) : theme
      }, renderChildren(children));
    });
  };
}