var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import { combineRules } from 'fela';

import hoistStatics from './hoistStatics';
import extractPassThroughProps from './extractPassThroughProps';
import extractUsedProps from './extractUsedProps';
import generateSelectorPrefix from './generateSelectorPrefix';
import resolvePassThrough from './resolvePassThrough';
import resolveUsedProps from './resolveUsedProps';

export default function createComponentFactory(createElement, RendererContext, FelaTheme) {
  var withProxy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var alwaysPassThroughProps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];

  return function createComponent(rule) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'div';
    var passThroughProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    var displayName = rule.name ? rule.name : 'FelaComponent';

    var FelaComponent = function FelaComponent(_ref) {
      var children = _ref.children,
          _felaRule = _ref._felaRule,
          extend = _ref.extend,
          innerRef = _ref.innerRef,
          id = _ref.id,
          style = _ref.style,
          as = _ref.as,
          className = _ref.className,
          _ref$passThrough = _ref.passThrough,
          passThrough = _ref$passThrough === undefined ? [] : _ref$passThrough,
          otherProps = _objectWithoutProperties(_ref, ['children', '_felaRule', 'extend', 'innerRef', 'id', 'style', 'as', 'className', 'passThrough']);

      var renderFn = function renderFn(renderer) {
        return createElement(FelaTheme, undefined, function (_felaTheme) {
          if (!renderer) {
            throw new Error("createComponent() can't render styles without the renderer in the context. Missing react-fela's <Provider /> at the app root?");
          }

          var usedProps = withProxy ? extractUsedProps(rule, _felaTheme) : [];

          var rules = [rule];
          if (_felaRule) {
            rules.push(_felaRule);
          }
          if (extend) {
            if (typeof extend === 'function') {
              rules.push(extend);
            } else {
              rules.push(function () {
                return extend;
              });
            }
          }
          var combinedRule = combineRules.apply(undefined, rules);

          // improve developer experience with monolithic renderer
          if (process.env.NODE_ENV !== 'production' && renderer.prettySelectors) {
            var componentName = typeof type === 'string' ? displayName : type.displayName || type.name || '';

            combinedRule.selectorPrefix = generateSelectorPrefix(componentName);
          }
          // compose passThrough props from arrays or functions
          var resolvedPassThrough = [].concat(_toConsumableArray(alwaysPassThroughProps), _toConsumableArray(resolvePassThrough(passThroughProps, otherProps)), _toConsumableArray(resolvePassThrough(passThrough, otherProps)), _toConsumableArray(withProxy ? resolveUsedProps(usedProps, otherProps) : []));

          var ruleProps = _extends({}, otherProps, {
            theme: _felaTheme,
            as: as,
            id: id

            // if the component renders into another Fela component
            // we pass down the combinedRule as well as both
          });if (type._isFelaComponent) {
            return createElement(type, _extends({
              _felaRule: combinedRule,
              passThrough: resolvedPassThrough,
              innerRef: innerRef,
              style: style,
              className: className,
              as: as,
              id: id
            }, otherProps), children);
          }

          var componentProps = extractPassThroughProps(resolvedPassThrough, otherProps);

          // fela-native support
          if (renderer.isNativeRenderer) {
            var felaStyle = renderer.renderRule(combinedRule, ruleProps);
            componentProps.style = style ? [style, felaStyle] : felaStyle;
          } else {
            if (style) {
              componentProps.style = style;
            }

            var cls = className ? className + ' ' : '';
            componentProps.className = cls + renderer.renderRule(combinedRule, ruleProps);
          }

          if (id) {
            componentProps.id = id;
          }

          if (innerRef) {
            componentProps.ref = innerRef;
          }

          var customType = as || type;
          return createElement(customType, componentProps, children);
        });
      };

      return createElement(RendererContext.Consumer, undefined, renderFn);
    };

    // use the rule name as display name to better debug with react inspector
    FelaComponent.displayName = displayName;
    FelaComponent._isFelaComponent = true;

    return hoistStatics(FelaComponent, type);
  };
}