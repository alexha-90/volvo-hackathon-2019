function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import arrayReduce from 'fast-loops/lib/arrayReduce';
import objectReduce from 'fast-loops/lib/objectReduce';

import insertAtIndex from './insertAtIndex';

// TODO: we can further improve this one
export default function objectSortByScore(obj, getScore) {
  var sortedKeys = objectReduce(obj, function (resultSortedKeys, value, key) {
    var index = resultSortedKeys.findIndex(function (el) {
      return getScore(obj[el], el) > getScore(value, key);
    });

    if (index !== -1) {
      return insertAtIndex(resultSortedKeys, key, index);
    }

    return [].concat(_toConsumableArray(resultSortedKeys), [key]);
  }, []);

  return arrayReduce(sortedKeys, function (sortedObj, key) {
    sortedObj[key] = obj[key];
    return sortedObj;
  }, {});
}