{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = AmPm;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _mergeClassNames = _interopRequireDefault(require(\"merge-class-names\"));\n\nvar _dates = require(\"../shared/dates\");\n\nvar _propTypes2 = require(\"../shared/propTypes\");\n\nvar _utils = require(\"../shared/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction AmPm(_ref) {\n  var ariaLabel = _ref.ariaLabel,\n      className = _ref.className,\n      disabled = _ref.disabled,\n      itemRef = _ref.itemRef,\n      locale = _ref.locale,\n      maxTime = _ref.maxTime,\n      minTime = _ref.minTime,\n      onChange = _ref.onChange,\n      required = _ref.required,\n      value = _ref.value;\n  var amDisabled = minTime && (0, _dates.convert24to12)((0, _dates.getHours)(minTime))[1] === 'pm';\n  var pmDisabled = maxTime && (0, _dates.convert24to12)((0, _dates.getHours)(maxTime))[1] === 'am';\n  var name = 'amPm';\n\n  var _getAmPmLabels = (0, _utils.getAmPmLabels)(locale),\n      _getAmPmLabels2 = _slicedToArray(_getAmPmLabels, 2),\n      amLabel = _getAmPmLabels2[0],\n      pmLabel = _getAmPmLabels2[1];\n\n  return _react[\"default\"].createElement(\"select\", {\n    \"aria-label\": ariaLabel,\n    className: (0, _mergeClassNames[\"default\"])(\"\".concat(className, \"__input\"), \"\".concat(className, \"__\").concat(name)),\n    disabled: disabled,\n    name: name,\n    onChange: onChange,\n    ref: function ref(_ref2) {\n      if (itemRef) {\n        itemRef(_ref2, name);\n      }\n    },\n    required: required,\n    value: value !== null ? value : ''\n  }, !value && _react[\"default\"].createElement(\"option\", {\n    value: \"\"\n  }, \"--\"), _react[\"default\"].createElement(\"option\", {\n    disabled: amDisabled,\n    value: \"am\"\n  }, amLabel), _react[\"default\"].createElement(\"option\", {\n    disabled: pmDisabled,\n    value: \"pm\"\n  }, pmLabel));\n}\n\nAmPm.propTypes = {\n  ariaLabel: _propTypes[\"default\"].string,\n  className: _propTypes[\"default\"].string.isRequired,\n  disabled: _propTypes[\"default\"].bool,\n  itemRef: _propTypes[\"default\"].func,\n  locale: _propTypes[\"default\"].string,\n  maxTime: _propTypes2.isTime,\n  minTime: _propTypes2.isTime,\n  onChange: _propTypes[\"default\"].func,\n  required: _propTypes[\"default\"].bool,\n  value: _propTypes[\"default\"].oneOf(['am', 'pm'])\n};","map":null,"metadata":{},"sourceType":"script"}