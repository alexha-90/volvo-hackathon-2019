{"ast":null,"code":"var _jsxFileName = \"/Users/aha1/Desktop/car-share/frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport CarPicker from './VehiclePicker';\nimport { convertStrToDate } from './util/DateFormat';\nimport { getVehicles } from './api';\nimport NewCalendar from \"./DatePicker\"; // import { StyleProvider, ThemeProvider } from \"vcc-ui\";\n// import volvo from \"vcc-ui/lib/themes/volvo\";\n//============================================================================//\n\nconst strapi = new Strapi(\"http://localhost:1337\");\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onSelectCalendarDates = requested => {\n      let availableVehs;\n      const reservationData = this.state.reservationData;\n      /*\n      for (let i = 0; i < reservationData.length; i++) {\n        const iStartDate = convertStrToDate(reservationData[i].start_time);\n        const iEndDate = convertStrToDate(reservationData[i].end_time);\n         // descr: requested START is ok if\n        //    1) After iStartDate OR\n        //    2) Same day as iStartDate, but in afternoon\n        console.log(requested.start.date > iStartDate)\n        console.log(requested.start.date === iStartDate)\n        if (requested.start.date > iStartDate ||\n          (requested.start.date === iStartDate && requested.start.timeOfDay === \"afternoon\")\n        ) {\n          debugger;\n        } else {\n          // invalid\n          debugger;\n        }\n         // descr: requested END is ok if\n        //    1) Before iStartDate OR\n        //    2) Same day as iStartDate, but in morning\n        if (requested.end.date < iStartDate ||\n          (requested.end.date === iStartDate && requested.end.timeOfDay === \"morning\")\n        ) {\n          debugger;\n        } else {\n          // invalid\n          debugger;\n        }\n        console.log(iStartDate, iEndDate);\n        debugger;\n        // availableVehs.push(reservationData[i])\n      }\n      */\n\n      availableVehs = this.state.vehicleData;\n      this.setState({\n        availableVehicles: availableVehs,\n        newReservationRequest: requested\n      });\n    };\n\n    this.showCarPicker = () => {\n      if (this.state.availableVehicles.length > 0) {\n        return React.createElement(CarPicker, {\n          availableVehicles: this.state.availableVehicles,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, \"No vehicles found for dates you provided :(\");\n      }\n    };\n\n    this.state = {\n      loadingReservationData: true,\n      vehicleData: [],\n      reservationData: [],\n      newReservationRequest: [],\n      globalError: false,\n      availableVehicles: []\n    };\n  }\n\n  componentDidMount() {\n    getVehicles().then(vehicles => {\n      vehicles.json().then(vehicleData => {\n        this.setState({\n          vehicleData: vehicleData\n        });\n        return strapi.getEntries(\"reservations\");\n      }).then(reservationData => {\n        this.setState({\n          reservationData: reservationData,\n          loadingReservationData: false\n        });\n      });\n    }).catch(err => {\n      console.error(err);\n      this.setState({\n        globalError: true,\n        loadingReservationData: false\n      });\n    });\n  }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevState.newReservationRequest !== this.state.newReservationRequest) {}\n  // }\n  render() {\n    console.log('reservationData: ', this.state.reservationData);\n    console.log('vehicleData: ', this.state.vehicleData);\n\n    if (this.state.loadingReservationData) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Loading reservation data...\");\n    }\n\n    if (this.state.globalError) {\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \":( Error occurred while fetching information. Please try again later\");\n    } else {\n      return React.createElement(\"main\", {\n        className: \"content-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(NewCalendar, {\n        onSelectCalendarDates: this.onSelectCalendarDates,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), this.showCarPicker());\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/aha1/Desktop/car-share/frontend/src/App.js"],"names":["React","Component","Strapi","CarPicker","convertStrToDate","getVehicles","NewCalendar","strapi","App","constructor","onSelectCalendarDates","requested","availableVehs","reservationData","state","vehicleData","setState","availableVehicles","newReservationRequest","showCarPicker","length","loadingReservationData","globalError","componentDidMount","then","vehicles","json","getEntries","catch","err","console","error","render","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport CarPicker from './VehiclePicker';\nimport { convertStrToDate } from './util/DateFormat';\n\nimport { getVehicles } from './api';\nimport NewCalendar from \"./DatePicker\";\n// import { StyleProvider, ThemeProvider } from \"vcc-ui\";\n// import volvo from \"vcc-ui/lib/themes/volvo\";\n//============================================================================//\n\nconst strapi = new Strapi(\"http://localhost:1337\");\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loadingReservationData: true,\n      vehicleData: [],\n      reservationData: [],\n      newReservationRequest: [],\n      globalError: false,\n      availableVehicles: []\n    }\n  }\n\n  componentDidMount() {\n    getVehicles()\n      .then(vehicles => {vehicles.json()\n        .then(vehicleData => {\n          this.setState({ vehicleData: vehicleData });\n          return strapi.getEntries(\"reservations\");\n        })\n        .then(reservationData => {\n          this.setState({ reservationData: reservationData, loadingReservationData: false });\n        })\n      })\n      .catch(err => {\n        console.error(err);\n        this.setState({globalError: true, loadingReservationData: false });\n      })\n  }\n\n  onSelectCalendarDates = (requested) => {\n    let availableVehs;\n    const { reservationData } = this.state;\n    /*\n    for (let i = 0; i < reservationData.length; i++) {\n      const iStartDate = convertStrToDate(reservationData[i].start_time);\n      const iEndDate = convertStrToDate(reservationData[i].end_time);\n\n      // descr: requested START is ok if\n      //    1) After iStartDate OR\n      //    2) Same day as iStartDate, but in afternoon\n      console.log(requested.start.date > iStartDate)\n      console.log(requested.start.date === iStartDate)\n      if (requested.start.date > iStartDate ||\n        (requested.start.date === iStartDate && requested.start.timeOfDay === \"afternoon\")\n      ) {\n        debugger;\n      } else {\n        // invalid\n        debugger;\n      }\n\n      // descr: requested END is ok if\n      //    1) Before iStartDate OR\n      //    2) Same day as iStartDate, but in morning\n      if (requested.end.date < iStartDate ||\n        (requested.end.date === iStartDate && requested.end.timeOfDay === \"morning\")\n      ) {\n        debugger;\n      } else {\n        // invalid\n        debugger;\n      }\n      console.log(iStartDate, iEndDate);\n      debugger;\n      // availableVehs.push(reservationData[i])\n    }\n    */\n    availableVehs = this.state.vehicleData;\n    this.setState({ availableVehicles: availableVehs, newReservationRequest: requested })\n  };\n\n  showCarPicker = () => {\n    if (this.state.availableVehicles.length > 0) {\n      return <CarPicker availableVehicles={this.state.availableVehicles}/>\n    } else {\n      return <div>No vehicles found for dates you provided :(</div>\n    }\n  };\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevState.newReservationRequest !== this.state.newReservationRequest) {}\n  // }\n\n  render() {\n    console.log('reservationData: ', this.state.reservationData);\n    console.log('vehicleData: ', this.state.vehicleData);\n    if (this.state.loadingReservationData) {\n      return <div>Loading reservation data...</div>\n    }\n    if (this.state.globalError) {\n      return <main>:( Error occurred while fetching information. Please try again later</main>\n    } else {\n      return (\n        <main className='content-container'>\n          <NewCalendar onSelectCalendarDates={this.onSelectCalendarDates}/>\n          {/*<CalendarComponent onSelectCalendarDates={this.onSelectCalendarDates}/>*/}\n          {this.showCarPicker()}\n        </main>\n      );\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}