{"ast":null,"code":"var _jsxFileName = \"/Users/aha1/Desktop/car-share/frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport CarPicker from './VehiclePicker';\nimport { convertStrToDate } from './util/DateFormat';\nimport { getVehicles, submitReservation } from './api';\nimport DatePicker from \"./DatePicker\"; // import { StyleProvider, ThemeProvider } from \"vcc-ui\";\n// import volvo from \"vcc-ui/lib/themes/volvo\";\n//============================================================================//\n\nconst strapi = new Strapi(\"http://localhost:1337\");\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onSelectCalendarDates = requested => {\n      let availableVehs;\n      const reservationData = this.state.reservationData;\n      /*\n      for (let i = 0; i < reservationData.length; i++) {\n        const iStartDate = convertStrToDate(reservationData[i].start_time);\n        const iEndDate = convertStrToDate(reservationData[i].end_time);\n         // descr: requested START is ok if\n        //    1) After iStartDate OR\n        //    2) Same day as iStartDate, but in afternoon\n        console.log(requested.start.date > iStartDate)\n        console.log(requested.start.date === iStartDate)\n        if (requested.start.date > iStartDate ||\n          (requested.start.date === iStartDate && requested.start.timeOfDay === \"afternoon\")\n        ) {\n          debugger;\n        } else {\n          // invalid\n          debugger;\n        }\n         // descr: requested END is ok if\n        //    1) Before iStartDate OR\n        //    2) Same day as iStartDate, but in morning\n        if (requested.end.date < iStartDate ||\n          (requested.end.date === iStartDate && requested.end.timeOfDay === \"morning\")\n        ) {\n          debugger;\n        } else {\n          // invalid\n          debugger;\n        }\n        console.log(iStartDate, iEndDate);\n        debugger;\n        // availableVehs.push(reservationData[i])\n      }\n      */\n\n      availableVehs = this.state.vehicleData;\n      this.setState({\n        availableVehicles: availableVehs,\n        reservationRequest: requested\n      });\n    };\n\n    this.submitReservation = vehicle => {\n      console.log(vehicle);\n      const name = prompt(\"What is your full name?\");\n      const email = prompt(\"What is your email?\");\n      const submissionObj = {\n        id: \"string\",\n        start_time: this.state.reservationRequest.start.date,\n        end_time: this.state.reservationRequest.end.date,\n        admin: \"ccs.testcars@gmail.com\",\n        health: \"green\",\n        ongoing: true,\n        user: {\n          schema: {\n            id: \"string\",\n            email: email,\n            name: name\n          }\n        },\n        vehicle: {\n          schema: {\n            admin: \"ccs.testcars@gmail.com\",\n            vin: vehicle.Vin,\n            latitude: 0,\n            longitude: 0,\n            model: vehicle.Model,\n            year: vehicle.Year\n          }\n        }\n      };\n      console.log(submissionObj);\n      debugger;\n      submitReservation(submissionObj);\n    };\n\n    this.showCarPicker = () => {\n      if (this.state.availableVehicles.length > 0) {\n        return React.createElement(CarPicker, {\n          availableVehicles: this.state.availableVehicles,\n          submitReservation: this.submitReservation,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        });\n      } else {\n        return null; // return <div>No vehicles found for dates you provided :(</div>\n      }\n    };\n\n    this.state = {\n      loadingReservationData: true,\n      vehicleData: [],\n      reservationData: [],\n      reservationRequest: [],\n      globalError: false,\n      availableVehicles: []\n    };\n  }\n\n  componentDidMount() {\n    getVehicles().then(vehicles => {\n      vehicles.json().then(vehicleData => {\n        this.setState({\n          vehicleData: vehicleData\n        });\n        return strapi.getEntries(\"reservations\");\n      }).then(reservationData => {\n        this.setState({\n          reservationData: reservationData,\n          loadingReservationData: false\n        });\n      });\n    }).catch(err => {\n      console.error(err);\n      this.setState({\n        globalError: true,\n        loadingReservationData: false\n      });\n    });\n  }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevState.reservationRequest !== this.state.reservationRequest) {}\n  // }\n  render() {\n    console.log('reservationData: ', this.state.reservationData);\n    console.log('vehicleData: ', this.state.vehicleData);\n\n    if (this.state.loadingReservationData) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"Loading reservation data...\");\n    }\n\n    if (this.state.globalError) {\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \":( Error occurred while fetching information. Please try again later\");\n    } else {\n      return React.createElement(\"main\", {\n        className: \"content-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(DatePicker, {\n        onSelectCalendarDates: this.onSelectCalendarDates,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }), this.showCarPicker());\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/aha1/Desktop/car-share/frontend/src/App.js"],"names":["React","Component","Strapi","CarPicker","convertStrToDate","getVehicles","submitReservation","DatePicker","strapi","App","constructor","onSelectCalendarDates","requested","availableVehs","reservationData","state","vehicleData","setState","availableVehicles","reservationRequest","vehicle","console","log","name","prompt","email","submissionObj","id","start_time","start","date","end_time","end","admin","health","ongoing","user","schema","vin","Vin","latitude","longitude","model","Model","year","Year","showCarPicker","length","loadingReservationData","globalError","componentDidMount","then","vehicles","json","getEntries","catch","err","error","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport CarPicker from './VehiclePicker';\nimport { convertStrToDate } from './util/DateFormat';\n\nimport {getVehicles, submitReservation} from './api';\nimport DatePicker from \"./DatePicker\";\n// import { StyleProvider, ThemeProvider } from \"vcc-ui\";\n// import volvo from \"vcc-ui/lib/themes/volvo\";\n//============================================================================//\n\nconst strapi = new Strapi(\"http://localhost:1337\");\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loadingReservationData: true,\n      vehicleData: [],\n      reservationData: [],\n      reservationRequest: [],\n      globalError: false,\n      availableVehicles: []\n    }\n  }\n\n  componentDidMount() {\n    getVehicles()\n      .then(vehicles => {vehicles.json()\n        .then(vehicleData => {\n          this.setState({ vehicleData: vehicleData });\n          return strapi.getEntries(\"reservations\");\n        })\n        .then(reservationData => {\n          this.setState({ reservationData: reservationData, loadingReservationData: false });\n        })\n      })\n      .catch(err => {\n        console.error(err);\n        this.setState({globalError: true, loadingReservationData: false });\n      })\n  }\n\n  onSelectCalendarDates = (requested) => {\n    let availableVehs;\n    const { reservationData } = this.state;\n    /*\n    for (let i = 0; i < reservationData.length; i++) {\n      const iStartDate = convertStrToDate(reservationData[i].start_time);\n      const iEndDate = convertStrToDate(reservationData[i].end_time);\n\n      // descr: requested START is ok if\n      //    1) After iStartDate OR\n      //    2) Same day as iStartDate, but in afternoon\n      console.log(requested.start.date > iStartDate)\n      console.log(requested.start.date === iStartDate)\n      if (requested.start.date > iStartDate ||\n        (requested.start.date === iStartDate && requested.start.timeOfDay === \"afternoon\")\n      ) {\n        debugger;\n      } else {\n        // invalid\n        debugger;\n      }\n\n      // descr: requested END is ok if\n      //    1) Before iStartDate OR\n      //    2) Same day as iStartDate, but in morning\n      if (requested.end.date < iStartDate ||\n        (requested.end.date === iStartDate && requested.end.timeOfDay === \"morning\")\n      ) {\n        debugger;\n      } else {\n        // invalid\n        debugger;\n      }\n      console.log(iStartDate, iEndDate);\n      debugger;\n      // availableVehs.push(reservationData[i])\n    }\n    */\n    availableVehs = this.state.vehicleData;\n    this.setState({ availableVehicles: availableVehs, reservationRequest: requested })\n  };\n\n  submitReservation = (vehicle) => {\n    console.log(vehicle);\n    const name = prompt(\"What is your full name?\");\n    const email = prompt(\"What is your email?\");\n    const submissionObj = {\n      id: \"string\",\n      start_time: this.state.reservationRequest.start.date,\n      end_time: this.state.reservationRequest.end.date,\n      admin: \"ccs.testcars@gmail.com\",\n      health: \"green\",\n      ongoing: true,\n      user: {\n        schema: {\n          id: \"string\",\n          email: email,\n          name: name\n        }\n      },\n      vehicle: {\n        schema: {\n          admin: \"ccs.testcars@gmail.com\",\n          vin: vehicle.Vin,\n          latitude: 0,\n          longitude: 0,\n          model: vehicle.Model,\n          year: vehicle.Year\n        }\n      }\n    };\n\n    console.log(submissionObj);\n\n    debugger;\n\n    submitReservation(submissionObj);\n  };\n\n\n  showCarPicker = () => {\n    if (this.state.availableVehicles.length > 0) {\n      return <CarPicker\n        availableVehicles={this.state.availableVehicles}\n        submitReservation={this.submitReservation}\n      />\n    } else {\n      return null;\n      // return <div>No vehicles found for dates you provided :(</div>\n    }\n  };\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevState.reservationRequest !== this.state.reservationRequest) {}\n  // }\n\n  render() {\n    console.log('reservationData: ', this.state.reservationData);\n    console.log('vehicleData: ', this.state.vehicleData);\n    if (this.state.loadingReservationData) {\n      return <div>Loading reservation data...</div>\n    }\n    if (this.state.globalError) {\n      return <main>:( Error occurred while fetching information. Please try again later</main>\n    } else {\n      return (\n        <main className='content-container'>\n          <DatePicker onSelectCalendarDates={this.onSelectCalendarDates}/>\n          {/*<CalendarComponent onSelectCalendarDates={this.onSelectCalendarDates}/>*/}\n          {this.showCarPicker()}\n        </main>\n      );\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}