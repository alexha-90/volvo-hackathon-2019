{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactLifecyclesCompat = require(\"react-lifecycles-compat\");\n\nvar _DayInput = _interopRequireDefault(require(\"react-date-picker/dist/DateInput/DayInput\"));\n\nvar _MonthInput = _interopRequireDefault(require(\"react-date-picker/dist/DateInput/MonthInput\"));\n\nvar _MonthSelect = _interopRequireDefault(require(\"react-date-picker/dist/DateInput/MonthSelect\"));\n\nvar _YearInput = _interopRequireDefault(require(\"react-date-picker/dist/DateInput/YearInput\"));\n\nvar _Hour12Input = _interopRequireDefault(require(\"react-time-picker/dist/TimeInput/Hour12Input\"));\n\nvar _Hour24Input = _interopRequireDefault(require(\"react-time-picker/dist/TimeInput/Hour24Input\"));\n\nvar _MinuteInput = _interopRequireDefault(require(\"react-time-picker/dist/TimeInput/MinuteInput\"));\n\nvar _SecondInput = _interopRequireDefault(require(\"react-time-picker/dist/TimeInput/SecondInput\"));\n\nvar _AmPm = _interopRequireDefault(require(\"react-time-picker/dist/TimeInput/AmPm\"));\n\nvar _Divider = _interopRequireDefault(require(\"./Divider\"));\n\nvar _NativeInput = _interopRequireDefault(require(\"./DateTimeInput/NativeInput\"));\n\nvar _dateFormatter = require(\"./shared/dateFormatter\");\n\nvar _dates = require(\"./shared/dates\");\n\nvar _propTypes2 = require(\"./shared/propTypes\");\n\nvar _utils = require(\"./shared/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nvar defaultMinDate = new Date(-8.64e15);\nvar defaultMaxDate = new Date(8.64e15);\nvar allViews = ['hour', 'minute', 'second'];\n\nvar datesAreDifferent = function datesAreDifferent(date1, date2) {\n  return date1 && !date2 || !date1 && date2 || date1 && date2 && date1.getTime() !== date2.getTime();\n};\n\nvar isSameDate = function isSameDate(date, year, month, day) {\n  return (0, _dates.getYear)(date) === year && (0, _dates.getMonth)(date) === month && (0, _dates.getDay)(date) === day;\n};\n\nvar getValueFromRange = function getValueFromRange(valueOrArrayOfValues, index) {\n  if (Array.isArray(valueOrArrayOfValues)) {\n    return valueOrArrayOfValues[index];\n  }\n\n  return valueOrArrayOfValues;\n};\n\nvar parseAndValidateDate = function parseAndValidateDate(rawValue) {\n  if (!rawValue) {\n    return null;\n  }\n\n  var valueDate = new Date(rawValue);\n\n  if (isNaN(valueDate.getTime())) {\n    throw new Error(\"Invalid date: \".concat(rawValue));\n  }\n\n  return valueDate;\n};\n\nvar getDetailValue = function getDetailValue(value, minDate, maxDate) {\n  if (!value) {\n    return null;\n  }\n\n  return (0, _utils.between)(value, minDate, maxDate);\n};\n\nvar getValueFrom = function getValueFrom(value) {\n  var valueFrom = getValueFromRange(value, 0);\n  return parseAndValidateDate(valueFrom);\n};\n\nvar getDetailValueFrom = function getDetailValueFrom(value, minDate, maxDate) {\n  var valueFrom = getValueFrom(value);\n  return getDetailValue(valueFrom, minDate, maxDate);\n};\n\nvar getValueTo = function getValueTo(value) {\n  var valueTo = getValueFromRange(value, 1);\n  return parseAndValidateDate(valueTo);\n};\n\nvar getDetailValueTo = function getDetailValueTo(value, minDate, maxDate) {\n  var valueTo = getValueTo(value);\n  return getDetailValue(valueTo, minDate, maxDate);\n};\n\nvar isValidInput = function isValidInput(element) {\n  return element.tagName === 'INPUT' && element.type === 'number';\n};\n\nvar findInput = function findInput(element, property) {\n  var nextElement = element;\n\n  do {\n    nextElement = nextElement[property];\n  } while (nextElement && !isValidInput(nextElement));\n\n  return nextElement;\n};\n\nvar focus = function focus(element) {\n  return element && element.focus();\n};\n\nvar _renderCustomInputs = function renderCustomInputs(placeholder, elementFunctions, allowMultipleInstances) {\n  var usedFunctions = [];\n  var pattern = new RegExp(Object.keys(elementFunctions).map(function (el) {\n    return \"\".concat(el, \"+\");\n  }).join('|'), 'g');\n  var matches = placeholder.match(pattern);\n  return placeholder.split(pattern).reduce(function (arr, element, index) {\n    var divider = element && // eslint-disable-next-line react/no-array-index-key\n    _react[\"default\"].createElement(_Divider[\"default\"], {\n      key: \"separator_\".concat(index)\n    }, element);\n\n    var res = [].concat(_toConsumableArray(arr), [divider]);\n    var currentMatch = matches && matches[index];\n\n    if (currentMatch) {\n      var renderFunction = elementFunctions[currentMatch] || elementFunctions[Object.keys(elementFunctions).find(function (elementFunction) {\n        return currentMatch.match(elementFunction);\n      })];\n\n      if (!allowMultipleInstances && usedFunctions.includes(renderFunction)) {\n        res.push(currentMatch);\n      } else {\n        res.push(renderFunction(currentMatch));\n        usedFunctions.push(renderFunction);\n      }\n    }\n\n    return res;\n  }, []);\n};\n\nvar DateTimeInput =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(DateTimeInput, _PureComponent);\n\n  function DateTimeInput() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DateTimeInput);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DateTimeInput)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      amPm: null,\n      year: null,\n      month: null,\n      day: null,\n      hour: null,\n      minute: null,\n      second: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (event) {\n      if (event.target === event.currentTarget) {\n        // Wrapper was directly clicked\n        var firstInput = event.target.children[1];\n        focus(firstInput);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function (event) {\n      switch (event.key) {\n        case 'ArrowLeft':\n        case 'ArrowRight':\n        case _this.dateDivider:\n        case _this.timeDivider:\n          {\n            event.preventDefault();\n            var input = event.target;\n            var property = event.key === 'ArrowLeft' ? 'previousElementSibling' : 'nextElementSibling';\n            var nextInput = findInput(input, property);\n            focus(nextInput);\n            break;\n          }\n\n        default:\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onKeyUp\", function (event) {\n      var key = event.key,\n          input = event.target;\n      var isNumberKey = !isNaN(parseInt(key, 10));\n\n      if (!isNumberKey) {\n        return;\n      }\n\n      var value = input.value;\n      var max = parseInt(input.getAttribute('max'), 10);\n      /**\n       * Given 1, the smallest possible number the user could type by adding another digit is 10.\n       * 10 would be a valid value given max = 12, so we won't jump to the next input.\n       * However, given 2, smallers possible number would be 20, and thus keeping the focus in\n       * this field doesn't make sense.\n       */\n\n      if (value * 10 > max) {\n        var property = 'nextElementSibling';\n        var nextInput = findInput(input, property);\n        focus(nextInput);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (event) {\n      var _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n\n      switch (name) {\n        case 'hour12':\n          {\n            _this.setState(function (prevState) {\n              return {\n                hour: value ? (0, _dates.convert12to24)(parseInt(value, 10), prevState.amPm) : null\n              };\n            }, _this.onChangeExternal);\n\n            break;\n          }\n\n        case 'hour24':\n          {\n            _this.setState({\n              hour: value ? parseInt(value, 10) : null\n            }, _this.onChangeExternal);\n\n            break;\n          }\n\n        default:\n          {\n            _this.setState(_defineProperty({}, name, value ? parseInt(value, 10) : null), _this.onChangeExternal);\n          }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeNative\", function (event) {\n      var onChange = _this.props.onChange;\n      var value = event.target.value;\n\n      if (!onChange) {\n        return;\n      }\n\n      var processedValue = function () {\n        if (!value) {\n          return null;\n        }\n\n        var _value$split = value.split('T'),\n            _value$split2 = _slicedToArray(_value$split, 2),\n            valueDate = _value$split2[0],\n            valueTime = _value$split2[1];\n\n        var _valueDate$split = valueDate.split('-'),\n            _valueDate$split2 = _slicedToArray(_valueDate$split, 3),\n            yearString = _valueDate$split2[0],\n            monthString = _valueDate$split2[1],\n            dayString = _valueDate$split2[2];\n\n        var year = parseInt(yearString, 10);\n        var monthIndex = parseInt(monthString, 10) - 1 || 0;\n        var date = parseInt(dayString, 10) || 1;\n\n        var _valueTime$split = valueTime.split(':'),\n            _valueTime$split2 = _slicedToArray(_valueTime$split, 3),\n            hourString = _valueTime$split2[0],\n            minuteString = _valueTime$split2[1],\n            secondString = _valueTime$split2[2];\n\n        var hour = parseInt(hourString, 10) || 0;\n        var minute = parseInt(minuteString, 10) || 0;\n        var second = parseInt(secondString, 10) || 0;\n        return new Date(year, monthIndex, date, hour, minute, second);\n      }();\n\n      onChange(processedValue, false);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeAmPm\", function (event) {\n      var value = event.target.value;\n\n      _this.setState({\n        amPm: value\n      }, _this.onChangeExternal);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeExternal\", function () {\n      var onChange = _this.props.onChange;\n\n      if (!onChange) {\n        return;\n      }\n\n      var formElements = [_this.dayInput, _this.monthInput, _this.yearInput, _this.hour12Input, _this.hour24Input, _this.minuteInput, _this.secondInput, _this.amPmInput].filter(Boolean);\n      var formElementsWithoutSelect = formElements.slice(0, -1);\n      var values = {};\n      formElements.forEach(function (formElement) {\n        values[formElement.name] = formElement.value;\n      });\n\n      if (formElementsWithoutSelect.every(function (formElement) {\n        return !formElement.value;\n      })) {\n        onChange(null, false);\n      } else if (formElements.every(function (formElement) {\n        return formElement.value && formElement.checkValidity();\n      })) {\n        var year = parseInt(values.year, 10);\n        var month = parseInt(values.month || 1, 10);\n        var day = parseInt(values.day || 1, 10);\n        var hour = parseInt(values.hour24 || (0, _dates.convert12to24)(values.hour12, values.amPm) || 0, 10);\n        var minute = parseInt(values.minute || 0, 10);\n        var second = parseInt(values.second || 0, 10);\n        var proposedValue = new Date(year, month - 1, day, hour, minute, second);\n        var processedValue = proposedValue;\n        onChange(processedValue, false);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderDay\", function (currentMatch) {\n      var _this$props = _this.props,\n          dayAriaLabel = _this$props.dayAriaLabel,\n          dayPlaceholder = _this$props.dayPlaceholder,\n          showLeadingZeros = _this$props.showLeadingZeros;\n      var _this$state = _this.state,\n          day = _this$state.day,\n          month = _this$state.month,\n          year = _this$state.year;\n\n      if (currentMatch && currentMatch.length > 2) {\n        throw new Error(\"Unsupported token: \".concat(currentMatch));\n      }\n\n      var showLeadingZerosFromFormat = currentMatch && currentMatch.length === 2;\n      return _react[\"default\"].createElement(_DayInput[\"default\"], _extends({\n        key: \"day\"\n      }, _this.commonInputProps, {\n        ariaLabel: dayAriaLabel,\n        month: month,\n        placeholder: dayPlaceholder,\n        showLeadingZeros: showLeadingZerosFromFormat || showLeadingZeros,\n        value: day,\n        year: year\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderMonth\", function (currentMatch) {\n      var _this$props2 = _this.props,\n          locale = _this$props2.locale,\n          monthAriaLabel = _this$props2.monthAriaLabel,\n          monthPlaceholder = _this$props2.monthPlaceholder,\n          showLeadingZeros = _this$props2.showLeadingZeros;\n      var _this$state2 = _this.state,\n          month = _this$state2.month,\n          year = _this$state2.year;\n\n      if (currentMatch && currentMatch.length > 4) {\n        throw new Error(\"Unsupported token: \".concat(currentMatch));\n      }\n\n      if (currentMatch.length > 2) {\n        return _react[\"default\"].createElement(_MonthSelect[\"default\"], _extends({\n          key: \"month\"\n        }, _this.commonInputProps, {\n          ariaLabel: monthAriaLabel,\n          locale: locale,\n          placeholder: monthPlaceholder,\n          \"short\": currentMatch.length === 3,\n          value: month,\n          year: year\n        }));\n      }\n\n      var showLeadingZerosFromFormat = currentMatch && currentMatch.length === 2;\n      return _react[\"default\"].createElement(_MonthInput[\"default\"], _extends({\n        key: \"month\"\n      }, _this.commonInputProps, {\n        ariaLabel: monthAriaLabel,\n        placeholder: monthPlaceholder,\n        showLeadingZeros: showLeadingZerosFromFormat || showLeadingZeros,\n        value: month,\n        year: year\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderYear\", function () {\n      var _this$props3 = _this.props,\n          yearAriaLabel = _this$props3.yearAriaLabel,\n          yearPlaceholder = _this$props3.yearPlaceholder;\n      var year = _this.state.year;\n      return _react[\"default\"].createElement(_YearInput[\"default\"], _extends({\n        key: \"year\"\n      }, _this.commonInputProps, {\n        ariaLabel: yearAriaLabel,\n        placeholder: yearPlaceholder,\n        value: year,\n        valueType: \"day\"\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderHour\", function (currentMatch) {\n      if (/h/.test(currentMatch)) {\n        return _this.renderHour12(currentMatch);\n      }\n\n      return _this.renderHour24(currentMatch);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderHour12\", function (currentMatch) {\n      var _this$props4 = _this.props,\n          hourAriaLabel = _this$props4.hourAriaLabel,\n          hourPlaceholder = _this$props4.hourPlaceholder;\n      var _this$state3 = _this.state,\n          amPm = _this$state3.amPm,\n          hour = _this$state3.hour;\n\n      if (currentMatch && currentMatch.length > 2) {\n        throw new Error(\"Unsupported token: \".concat(currentMatch));\n      }\n\n      var showLeadingZeros = currentMatch && currentMatch.length === 2;\n      return _react[\"default\"].createElement(_Hour12Input[\"default\"], _extends({\n        key: \"hour12\"\n      }, _this.commonInputProps, _this.commonTimeInputProps, {\n        amPm: amPm,\n        ariaLabel: hourAriaLabel,\n        placeholder: hourPlaceholder,\n        showLeadingZeros: showLeadingZeros,\n        value: hour\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderHour24\", function (currentMatch) {\n      var _this$props5 = _this.props,\n          hourAriaLabel = _this$props5.hourAriaLabel,\n          hourPlaceholder = _this$props5.hourPlaceholder;\n      var hour = _this.state.hour;\n\n      if (currentMatch && currentMatch.length > 2) {\n        throw new Error(\"Unsupported token: \".concat(currentMatch));\n      }\n\n      var showLeadingZeros = currentMatch && currentMatch.length === 2;\n      return _react[\"default\"].createElement(_Hour24Input[\"default\"], _extends({\n        key: \"hour24\"\n      }, _this.commonInputProps, _this.commonTimeInputProps, {\n        ariaLabel: hourAriaLabel,\n        placeholder: hourPlaceholder,\n        showLeadingZeros: showLeadingZeros,\n        value: hour\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderMinute\", function (currentMatch) {\n      var _this$props6 = _this.props,\n          minuteAriaLabel = _this$props6.minuteAriaLabel,\n          minutePlaceholder = _this$props6.minutePlaceholder;\n      var _this$state4 = _this.state,\n          hour = _this$state4.hour,\n          minute = _this$state4.minute;\n\n      if (currentMatch && currentMatch.length > 2) {\n        throw new Error(\"Unsupported token: \".concat(currentMatch));\n      }\n\n      var showLeadingZeros = currentMatch && currentMatch.length === 2;\n      return _react[\"default\"].createElement(_MinuteInput[\"default\"], _extends({\n        key: \"minute\"\n      }, _this.commonInputProps, _this.commonTimeInputProps, {\n        ariaLabel: minuteAriaLabel,\n        hour: hour,\n        placeholder: minutePlaceholder,\n        showLeadingZeros: showLeadingZeros,\n        value: minute\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderSecond\", function (currentMatch) {\n      var _this$props7 = _this.props,\n          secondAriaLabel = _this$props7.secondAriaLabel,\n          secondPlaceholder = _this$props7.secondPlaceholder;\n      var _this$state5 = _this.state,\n          hour = _this$state5.hour,\n          minute = _this$state5.minute,\n          second = _this$state5.second;\n\n      if (currentMatch && currentMatch.length > 2) {\n        throw new Error(\"Unsupported token: \".concat(currentMatch));\n      }\n\n      var showLeadingZeros = currentMatch ? currentMatch.length === 2 : true;\n      return _react[\"default\"].createElement(_SecondInput[\"default\"], _extends({\n        key: \"second\"\n      }, _this.commonInputProps, _this.commonTimeInputProps, {\n        ariaLabel: secondAriaLabel,\n        hour: hour,\n        minute: minute,\n        placeholder: secondPlaceholder,\n        showLeadingZeros: showLeadingZeros,\n        value: second\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderAmPm\", function () {\n      var _this$props8 = _this.props,\n          amPmAriaLabel = _this$props8.amPmAriaLabel,\n          locale = _this$props8.locale;\n      var amPm = _this.state.amPm;\n      return _react[\"default\"].createElement(_AmPm[\"default\"], _extends({\n        key: \"ampm\"\n      }, _this.commonInputProps, _this.commonTimeInputProps, {\n        ariaLabel: amPmAriaLabel,\n        locale: locale,\n        onChange: _this.onChangeAmPm,\n        value: amPm\n      }));\n    });\n\n    return _this;\n  }\n\n  _createClass(DateTimeInput, [{\n    key: \"renderCustomInputs\",\n    value: function renderCustomInputs() {\n      var placeholder = this.placeholder;\n      var format = this.props.format;\n      var elementFunctions = {\n        d: this.renderDay,\n        M: this.renderMonth,\n        y: this.renderYear,\n        h: this.renderHour,\n        H: this.renderHour,\n        m: this.renderMinute,\n        s: this.renderSecond,\n        a: this.renderAmPm\n      };\n      var allowMultipleInstances = typeof format !== 'undefined';\n      return _renderCustomInputs(placeholder, elementFunctions, allowMultipleInstances);\n    }\n  }, {\n    key: \"renderNativeInput\",\n    value: function renderNativeInput() {\n      var _this$props9 = this.props,\n          disabled = _this$props9.disabled,\n          maxDate = _this$props9.maxDate,\n          minDate = _this$props9.minDate,\n          name = _this$props9.name,\n          nativeInputAriaLabel = _this$props9.nativeInputAriaLabel,\n          required = _this$props9.required;\n      var value = this.state.value;\n      return _react[\"default\"].createElement(_NativeInput[\"default\"], {\n        key: \"time\",\n        ariaLabel: nativeInputAriaLabel,\n        disabled: disabled,\n        maxDate: maxDate || defaultMaxDate,\n        minDate: minDate || defaultMinDate,\n        name: name,\n        onChange: this.onChangeNative,\n        required: required,\n        value: value,\n        valueType: this.valueType\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = this.props.className;\n      return _react[\"default\"].createElement(\"div\", {\n        className: className,\n        onClick: this.onClick,\n        role: \"presentation\"\n      }, this.renderNativeInput(), this.renderCustomInputs());\n    }\n  }, {\n    key: \"formatTime\",\n    get: function get() {\n      var maxDetail = this.props.maxDetail;\n      var options = {\n        hour: 'numeric'\n      };\n      var level = allViews.indexOf(maxDetail);\n\n      if (level >= 1) {\n        options.minute = 'numeric';\n      }\n\n      if (level >= 2) {\n        options.second = 'numeric';\n      }\n\n      return (0, _dateFormatter.getFormatter)(options);\n    } // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"formatNumber\",\n    get: function get() {\n      var options = {\n        useGrouping: false\n      };\n      return (0, _dateFormatter.getFormatter)(options);\n    }\n  }, {\n    key: \"dateDivider\",\n    get: function get() {\n      return this.datePlaceholder.match(/[^0-9a-z]/i)[0];\n    }\n  }, {\n    key: \"timeDivider\",\n    get: function get() {\n      return this.timePlaceholder.match(/[^0-9a-z]/i)[0];\n    }\n  }, {\n    key: \"datePlaceholder\",\n    get: function get() {\n      var locale = this.props.locale;\n      var year = 2017;\n      var monthIndex = 11;\n      var day = 11;\n      var date = new Date(year, monthIndex, day);\n      return (0, _dateFormatter.formatDate)(locale, date).replace(this.formatNumber(locale, year), 'y').replace(this.formatNumber(locale, monthIndex + 1), 'M').replace(this.formatNumber(locale, day), 'd');\n    }\n  }, {\n    key: \"timePlaceholder\",\n    get: function get() {\n      var locale = this.props.locale;\n      var hour24 = 21;\n      var hour12 = 9;\n      var minute = 13;\n      var second = 14;\n      var date = new Date(2017, 0, 1, hour24, minute, second);\n      return this.formatTime(locale, date).replace(this.formatNumber(locale, hour12), 'h').replace(this.formatNumber(locale, hour24), 'H').replace(this.formatNumber(locale, minute), 'mm').replace(this.formatNumber(locale, second), 'ss').replace(new RegExp((0, _utils.getAmPmLabels)(locale).join('|')), 'a');\n    }\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      var format = this.props.format;\n\n      if (format) {\n        return format;\n      }\n\n      return \"\".concat(this.datePlaceholder, \"\\xA0\").concat(this.timePlaceholder);\n    }\n  }, {\n    key: \"maxTime\",\n    get: function get() {\n      var maxDate = this.props.maxDate;\n\n      if (!maxDate) {\n        return null;\n      }\n\n      var _this$state6 = this.state,\n          year = _this$state6.year,\n          month = _this$state6.month,\n          day = _this$state6.day;\n\n      if (!isSameDate(maxDate, year, month, day)) {\n        return null;\n      }\n\n      return (0, _dates.getHoursMinutesSeconds)(maxDate);\n    }\n  }, {\n    key: \"minTime\",\n    get: function get() {\n      var minDate = this.props.minDate;\n\n      if (!minDate) {\n        return null;\n      }\n\n      var _this$state7 = this.state,\n          year = _this$state7.year,\n          month = _this$state7.month,\n          day = _this$state7.day;\n\n      if (!isSameDate(minDate, year, month, day)) {\n        return null;\n      }\n\n      return (0, _dates.getHoursMinutesSeconds)(minDate);\n    }\n  }, {\n    key: \"commonInputProps\",\n    get: function get() {\n      var _this2 = this;\n\n      var _this$props10 = this.props,\n          className = _this$props10.className,\n          disabled = _this$props10.disabled,\n          isWidgetOpen = _this$props10.isWidgetOpen,\n          maxDate = _this$props10.maxDate,\n          minDate = _this$props10.minDate,\n          required = _this$props10.required;\n      return {\n        className: className,\n        disabled: disabled,\n        maxDate: maxDate || defaultMaxDate,\n        minDate: minDate || defaultMinDate,\n        onChange: this.onChange,\n        onKeyDown: this.onKeyDown,\n        onKeyUp: this.onKeyUp,\n        placeholder: '--',\n        // This is only for showing validity when editing\n        required: required || isWidgetOpen,\n        itemRef: function itemRef(ref, name) {\n          // Save a reference to each input field\n          _this2[\"\".concat(name, \"Input\")] = ref;\n        }\n      };\n    }\n  }, {\n    key: \"commonTimeInputProps\",\n    get: function get() {\n      var maxTime = this.maxTime,\n          minTime = this.minTime;\n      return {\n        maxTime: maxTime,\n        minTime: minTime\n      };\n    }\n    /**\n     * Returns value type that can be returned with currently applied settings.\n     */\n\n  }, {\n    key: \"valueType\",\n    get: function get() {\n      var maxDetail = this.props.maxDetail;\n      return maxDetail;\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var minDate = nextProps.minDate,\n          maxDate = nextProps.maxDate;\n      var nextState = {};\n      /**\n       * If isWidgetOpen flag has changed, we have to update it.\n       * It's saved in state purely for use in getDerivedStateFromProps.\n       */\n\n      if (nextProps.isWidgetOpen !== prevState.isWidgetOpen) {\n        nextState.isWidgetOpen = nextProps.isWidgetOpen;\n      }\n      /**\n       * If the next value is different from the current one  (with an exception of situation in\n       * which values provided are limited by minDate and maxDate so that the dates are the same),\n       * get a new one.\n       */\n\n\n      var nextValue = getDetailValueFrom(nextProps.value, minDate, maxDate);\n      var values = [nextValue, prevState.value];\n\n      if ( // Toggling calendar visibility resets values\n      nextState.isCalendarOpen // Flag was toggled\n      || datesAreDifferent.apply(void 0, _toConsumableArray(values.map(function (value) {\n        return getDetailValueFrom(value, minDate, maxDate);\n      }))) || datesAreDifferent.apply(void 0, _toConsumableArray(values.map(function (value) {\n        return getDetailValueTo(value, minDate, maxDate);\n      })))) {\n        if (nextValue) {\n          var _convert24to = (0, _dates.convert24to12)((0, _dates.getHours)(nextValue));\n\n          var _convert24to2 = _slicedToArray(_convert24to, 2);\n\n          nextState.amPm = _convert24to2[1];\n          nextState.year = (0, _dates.getYear)(nextValue);\n          nextState.month = (0, _dates.getMonth)(nextValue);\n          nextState.day = (0, _dates.getDay)(nextValue);\n          nextState.hour = (0, _dates.getHours)(nextValue);\n          nextState.minute = (0, _dates.getMinutes)(nextValue);\n          nextState.second = (0, _dates.getSeconds)(nextValue);\n        } else {\n          nextState.amPm = null;\n          nextState.year = null;\n          nextState.month = null;\n          nextState.day = null;\n          nextState.hour = null;\n          nextState.minute = null;\n          nextState.second = null;\n        }\n\n        nextState.value = nextValue;\n      }\n\n      return nextState;\n    }\n  }]);\n\n  return DateTimeInput;\n}(_react.PureComponent);\n\nexports[\"default\"] = DateTimeInput;\nDateTimeInput.defaultProps = {\n  maxDetail: 'minute',\n  name: 'datetime'\n};\n\nvar isValue = _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].instanceOf(Date)]);\n\nDateTimeInput.propTypes = {\n  amPmAriaLabel: _propTypes[\"default\"].string,\n  className: _propTypes[\"default\"].string.isRequired,\n  dayAriaLabel: _propTypes[\"default\"].string,\n  dayPlaceholder: _propTypes[\"default\"].string,\n  disabled: _propTypes[\"default\"].bool,\n  format: _propTypes[\"default\"].string,\n  hourAriaLabel: _propTypes[\"default\"].string,\n  hourPlaceholder: _propTypes[\"default\"].string,\n  isWidgetOpen: _propTypes[\"default\"].bool,\n  locale: _propTypes[\"default\"].string,\n  maxDate: _propTypes2.isMaxDate,\n  maxDetail: _propTypes[\"default\"].oneOf(allViews),\n  minDate: _propTypes2.isMinDate,\n  minuteAriaLabel: _propTypes[\"default\"].string,\n  minutePlaceholder: _propTypes[\"default\"].string,\n  monthAriaLabel: _propTypes[\"default\"].string,\n  monthPlaceholder: _propTypes[\"default\"].string,\n  name: _propTypes[\"default\"].string,\n  nativeInputAriaLabel: _propTypes[\"default\"].string,\n  onChange: _propTypes[\"default\"].func,\n  required: _propTypes[\"default\"].bool,\n  secondAriaLabel: _propTypes[\"default\"].string,\n  secondPlaceholder: _propTypes[\"default\"].string,\n  showLeadingZeros: _propTypes[\"default\"].bool,\n  value: _propTypes[\"default\"].oneOfType([isValue, _propTypes[\"default\"].arrayOf(isValue)]),\n  yearAriaLabel: _propTypes[\"default\"].string,\n  yearPlaceholder: _propTypes[\"default\"].string\n};\n(0, _reactLifecyclesCompat.polyfill)(DateTimeInput);","map":null,"metadata":{},"sourceType":"script"}