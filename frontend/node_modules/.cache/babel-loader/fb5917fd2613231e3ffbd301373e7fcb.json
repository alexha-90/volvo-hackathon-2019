{"ast":null,"code":"var MILI = 'milliseconds',\n    SECONDS = 'seconds',\n    MINUTES = 'minutes',\n    HOURS = 'hours',\n    DAY = 'day',\n    WEEK = 'week',\n    MONTH = 'month',\n    YEAR = 'year',\n    DECADE = 'decade',\n    CENTURY = 'century';\nexport function add(d, num, unit) {\n  d = new Date(d);\n\n  switch (unit) {\n    case MILI:\n      return milliseconds(d, milliseconds(d) + num);\n\n    case SECONDS:\n      return seconds(d, seconds(d) + num);\n\n    case MINUTES:\n      return minutes(d, minutes(d) + num);\n\n    case HOURS:\n      return hours(d, hours(d) + num);\n\n    case YEAR:\n      return year(d, year(d) + num);\n\n    case DAY:\n      return date(d, date(d) + num);\n\n    case WEEK:\n      return date(d, date(d) + 7 * num);\n\n    case MONTH:\n      return monthMath(d, num);\n\n    case DECADE:\n      return year(d, year(d) + num * 10);\n\n    case CENTURY:\n      return year(d, year(d) + num * 100);\n  }\n\n  throw new TypeError('Invalid units: \"' + unit + '\"');\n}\nexport function subtract(d, num, unit) {\n  return add(d, -num, unit);\n}\nexport function startOf(d, unit, firstOfWeek) {\n  d = new Date(d);\n\n  switch (unit) {\n    case CENTURY:\n    case DECADE:\n    case YEAR:\n      d = month(d, 0);\n\n    case MONTH:\n      d = date(d, 1);\n\n    case WEEK:\n    case DAY:\n      d = hours(d, 0);\n\n    case HOURS:\n      d = minutes(d, 0);\n\n    case MINUTES:\n      d = seconds(d, 0);\n\n    case SECONDS:\n      d = milliseconds(d, 0);\n  }\n\n  if (unit === DECADE) d = subtract(d, year(d) % 10, 'year');\n  if (unit === CENTURY) d = subtract(d, year(d) % 100, 'year');\n  if (unit === WEEK) d = weekday(d, 0, firstOfWeek);\n  return d;\n}\nexport function endOf(d, unit, firstOfWeek) {\n  d = new Date(d);\n  d = startOf(d, unit, firstOfWeek);\n  d = add(d, 1, unit);\n  d = subtract(d, 1, MILI);\n  return d;\n}\nexport var eq = createComparer(function (a, b) {\n  return a === b;\n});\nexport var neq = createComparer(function (a, b) {\n  return a !== b;\n});\nexport var gt = createComparer(function (a, b) {\n  return a > b;\n});\nexport var gte = createComparer(function (a, b) {\n  return a >= b;\n});\nexport var lt = createComparer(function (a, b) {\n  return a < b;\n});\nexport var lte = createComparer(function (a, b) {\n  return a <= b;\n});\nexport function min() {\n  return new Date(Math.min.apply(Math, arguments));\n}\nexport function max() {\n  return new Date(Math.max.apply(Math, arguments));\n}\nexport function inRange(day, min, max, unit) {\n  unit = unit || 'day';\n  return (!min || gte(day, min, unit)) && (!max || lte(day, max, unit));\n}\nexport var milliseconds = createAccessor('Milliseconds');\nexport var seconds = createAccessor('Seconds');\nexport var minutes = createAccessor('Minutes');\nexport var hours = createAccessor('Hours');\nexport var day = createAccessor('Day');\nexport var date = createAccessor('Date');\nexport var month = createAccessor('Month');\nexport var year = createAccessor('FullYear');\nexport function decade(d, val) {\n  return val === undefined ? year(startOf(d, DECADE)) : add(d, val + 10, YEAR);\n}\nexport function century(d, val) {\n  return val === undefined ? year(startOf(d, CENTURY)) : add(d, val + 100, YEAR);\n}\nexport function weekday(d, val, firstDay) {\n  var w = (day(d) + 7 - (firstDay || 0)) % 7;\n  return val === undefined ? w : add(d, val - w, DAY);\n}\nexport function diff(date1, date2, unit, asFloat) {\n  var dividend, divisor, result;\n\n  switch (unit) {\n    case MILI:\n    case SECONDS:\n    case MINUTES:\n    case HOURS:\n    case DAY:\n    case WEEK:\n      dividend = date2.getTime() - date1.getTime();\n      break;\n\n    case MONTH:\n    case YEAR:\n    case DECADE:\n    case CENTURY:\n      dividend = (year(date2) - year(date1)) * 12 + month(date2) - month(date1);\n      break;\n\n    default:\n      throw new TypeError('Invalid units: \"' + unit + '\"');\n  }\n\n  switch (unit) {\n    case MILI:\n      divisor = 1;\n      break;\n\n    case SECONDS:\n      divisor = 1000;\n      break;\n\n    case MINUTES:\n      divisor = 1000 * 60;\n      break;\n\n    case HOURS:\n      divisor = 1000 * 60 * 60;\n      break;\n\n    case DAY:\n      divisor = 1000 * 60 * 60 * 24;\n      break;\n\n    case WEEK:\n      divisor = 1000 * 60 * 60 * 24 * 7;\n      break;\n\n    case MONTH:\n      divisor = 1;\n      break;\n\n    case YEAR:\n      divisor = 12;\n      break;\n\n    case DECADE:\n      divisor = 120;\n      break;\n\n    case CENTURY:\n      divisor = 1200;\n      break;\n\n    default:\n      throw new TypeError('Invalid units: \"' + unit + '\"');\n  }\n\n  result = dividend / divisor;\n  return asFloat ? result : Math.round(result);\n}\n\nfunction monthMath(d, val) {\n  var current = month(d),\n      newMonth = current + val;\n  d = month(d, newMonth);\n\n  while (newMonth < 0) newMonth = 12 + newMonth; //month rollover\n\n\n  if (month(d) !== newMonth % 12) d = date(d, 0); //move to last of month\n\n  return d;\n}\n\nfunction createAccessor(method) {\n  var hourLength = function (method) {\n    switch (method) {\n      case 'Milliseconds':\n        return 3600000;\n\n      case 'Seconds':\n        return 3600;\n\n      case 'Minutes':\n        return 60;\n\n      case 'Hours':\n        return 1;\n\n      default:\n        return null;\n    }\n  }(method);\n\n  return function (d, val) {\n    if (val === undefined) return d['get' + method]();\n    var dateOut = new Date(d);\n    dateOut['set' + method](val);\n\n    if (hourLength && dateOut['get' + method]() != val && (method === 'Hours' || val >= hourLength && dateOut.getHours() - d.getHours() < Math.floor(val / hourLength))) {\n      //Skip DST hour, if it occurs\n      dateOut['set' + method](val + hourLength);\n    }\n\n    return dateOut;\n  };\n}\n\nfunction createComparer(operator) {\n  return function (a, b, unit) {\n    return operator(+startOf(a, unit), +startOf(b, unit));\n  };\n}","map":null,"metadata":{},"sourceType":"module"}