{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = WeekNumbers;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _WeekNumber = _interopRequireDefault(require(\"./WeekNumber\"));\n\nvar _Flex = _interopRequireDefault(require(\"../Flex\"));\n\nvar _dates = require(\"../shared/dates\");\n\nvar _propTypes2 = require(\"../shared/propTypes\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction WeekNumbers(props) {\n  var activeStartDate = props.activeStartDate,\n      calendarType = props.calendarType,\n      onClickWeekNumber = props.onClickWeekNumber,\n      showFixedNumberOfWeeks = props.showFixedNumberOfWeeks;\n\n  var numberOfWeeks = function () {\n    if (showFixedNumberOfWeeks) {\n      return 6;\n    }\n\n    var numberOfDays = (0, _dates.getDaysInMonth)(activeStartDate);\n    var startWeekday = (0, _dates.getDayOfWeek)(activeStartDate, calendarType);\n    var days = numberOfDays - (7 - startWeekday);\n    return 1 + Math.ceil(days / 7);\n  }();\n\n  var dates = function () {\n    var year = (0, _dates.getYear)(activeStartDate);\n    var monthIndex = (0, _dates.getMonthIndex)(activeStartDate);\n    var day = (0, _dates.getDay)(activeStartDate);\n    var result = [];\n\n    for (var index = 0; index < numberOfWeeks; index += 1) {\n      result.push((0, _dates.getBeginOfWeek)(new Date(year, monthIndex, day + index * 7), calendarType));\n    }\n\n    return result;\n  }();\n\n  var weekNumbers = dates.map(function (date) {\n    return (0, _dates.getWeekNumber)(date, calendarType);\n  });\n  return _react.default.createElement(_Flex.default, {\n    className: \"react-calendar__month-view__weekNumbers\",\n    count: numberOfWeeks,\n    direction: \"column\",\n    style: {\n      flexBasis: 'calc(100% * (1 / 8)',\n      flexShrink: 0\n    }\n  }, weekNumbers.map(function (weekNumber, weekIndex) {\n    return _react.default.createElement(_WeekNumber.default, {\n      date: dates[weekIndex],\n      key: weekNumber,\n      onClickWeekNumber: onClickWeekNumber,\n      weekNumber: weekNumber\n    });\n  }));\n}\n\nWeekNumbers.propTypes = {\n  activeStartDate: _propTypes.default.instanceOf(Date).isRequired,\n  calendarType: _propTypes2.isCalendarType.isRequired,\n  onClickWeekNumber: _propTypes.default.func,\n  showFixedNumberOfWeeks: _propTypes.default.bool\n};","map":null,"metadata":{},"sourceType":"script"}