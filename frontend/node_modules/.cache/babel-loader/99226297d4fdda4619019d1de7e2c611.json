{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst axios_1 = __importDefault(require(\"axios\"));\n\nconst Cookies = __importStar(require(\"js-cookie\"));\n\nconst qs = __importStar(require(\"qs\"));\n\nclass Strapi {\n  /**\n   * Default constructor.\n   * @param baseURL Your Strapi host.\n   * @param axiosConfig Extend Axios configuration.\n   */\n  constructor(baseURL, storeConfig, requestConfig) {\n    this.axios = axios_1.default.create(Object.assign({\n      baseURL,\n      paramsSerializer: qs.stringify\n    }, requestConfig));\n    this.storeConfig = Object.assign({\n      cookie: {\n        key: 'jwt',\n        options: {\n          path: '/'\n        }\n      },\n      localStorage: {\n        key: 'jwt'\n      }\n    }, storeConfig);\n\n    if (this.isBrowser()) {\n      let existingToken;\n\n      if (this.storeConfig.cookie) {\n        existingToken = Cookies.get(this.storeConfig.cookie.key);\n      } else if (this.storeConfig.localStorage) {\n        existingToken = JSON.parse(window.localStorage.getItem(this.storeConfig.localStorage.key));\n      }\n\n      if (existingToken) {\n        this.setToken(existingToken, true);\n      }\n    }\n  }\n  /**\n   * Axios request\n   * @param method Request method\n   * @param url Server URL\n   * @param requestConfig Custom Axios config\n   */\n\n\n  async request(method, url, requestConfig) {\n    try {\n      const response = await this.axios.request(Object.assign({\n        method,\n        url\n      }, requestConfig));\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message);\n      } else {\n        throw error;\n      }\n    }\n  }\n  /**\n   * Register a new user.\n   * @param username\n   * @param email\n   * @param password\n   * @returns Authentication User token and profile\n   */\n\n\n  async register(username, email, password) {\n    this.clearToken();\n    const authentication = await this.request('post', '/auth/local/register', {\n      data: {\n        email,\n        password,\n        username\n      }\n    });\n    this.setToken(authentication.jwt);\n    return authentication;\n  }\n  /**\n   * Login by getting an authentication token.\n   * @param identifier Can either be an email or a username.\n   * @param password\n   * @returns Authentication User token and profile\n   */\n\n\n  async login(identifier, password) {\n    this.clearToken();\n    const authentication = await this.request('post', '/auth/local', {\n      data: {\n        identifier,\n        password\n      }\n    });\n    this.setToken(authentication.jwt);\n    return authentication;\n  }\n  /**\n   * Sends an email to a user with the link of your reset password page.\n   * This link contains an URL param code which is required to reset user password.\n   * Received link url format https://my-domain.com/rest-password?code=privateCode.\n   * @param email\n   * @param url Link that user will receive.\n   */\n\n\n  async forgotPassword(email, url) {\n    this.clearToken();\n    await this.request('post', '/auth/forgot-password', {\n      data: {\n        email,\n        url\n      }\n    });\n  }\n  /**\n   * Reset the user password.\n   * @param code Is the url params received from the email link (see forgot password).\n   * @param password\n   * @param passwordConfirmation\n   */\n\n\n  async resetPassword(code, password, passwordConfirmation) {\n    this.clearToken();\n    await this.request('post', '/auth/reset-password', {\n      data: {\n        code,\n        password,\n        passwordConfirmation\n      }\n    });\n  }\n  /**\n   * Retrieve the connect provider URL\n   * @param provider\n   */\n\n\n  getProviderAuthenticationUrl(provider) {\n    return \"\".concat(this.axios.defaults.baseURL, \"/connect/\").concat(provider);\n  }\n  /**\n   * Authenticate the user with the token present on the URL (for browser) or in `params` (on Node.js)\n   * @param provider\n   * @param params\n   */\n\n\n  async authenticateProvider(provider, params) {\n    this.clearToken(); // Handling browser query\n\n    if (this.isBrowser()) {\n      params = qs.parse(window.location.search, {\n        ignoreQueryPrefix: true\n      });\n    }\n\n    const authentication = await this.request('get', \"/auth/\".concat(provider, \"/callback\"), {\n      params\n    });\n    this.setToken(authentication.jwt);\n    return authentication;\n  }\n  /**\n   * List entries\n   * @param contentTypePluralized\n   * @param params Filter and order queries.\n   */\n\n\n  getEntries(contentTypePluralized, params) {\n    return this.request('get', \"/\".concat(contentTypePluralized), {\n      params\n    });\n  }\n  /**\n   * Get the total count of entries with the provided criteria\n   * @param contentType\n   * @param params Filter and order queries.\n   */\n\n\n  getEntryCount(contentType, params) {\n    return this.request('get', \"/\".concat(contentType, \"/count\"), {\n      params\n    });\n  }\n  /**\n   * Get a specific entry\n   * @param contentTypePluralized Type of entry pluralized\n   * @param id ID of entry\n   */\n\n\n  getEntry(contentTypePluralized, id) {\n    return this.request('get', \"/\".concat(contentTypePluralized, \"/\").concat(id));\n  }\n  /**\n   * Create data\n   * @param contentTypePluralized Type of entry pluralized\n   * @param data New entry\n   */\n\n\n  createEntry(contentTypePluralized, data) {\n    return this.request('post', \"/\".concat(contentTypePluralized), {\n      data\n    });\n  }\n  /**\n   * Update data\n   * @param contentTypePluralized Type of entry pluralized\n   * @param id ID of entry\n   * @param data\n   */\n\n\n  updateEntry(contentTypePluralized, id, data) {\n    return this.request('put', \"/\".concat(contentTypePluralized, \"/\").concat(id), {\n      data\n    });\n  }\n  /**\n   * Delete an entry\n   * @param contentTypePluralized Type of entry pluralized\n   * @param id ID of entry\n   */\n\n\n  deleteEntry(contentTypePluralized, id) {\n    return this.request('delete', \"/\".concat(contentTypePluralized, \"/\").concat(id));\n  }\n  /**\n   * Search for files\n   * @param query Keywords\n   */\n\n\n  searchFiles(query) {\n    return this.request('get', \"/upload/search/\".concat(decodeURIComponent(query)));\n  }\n  /**\n   * Get files\n   * @param params Filter and order queries\n   * @returns Object[] Files data\n   */\n\n\n  getFiles(params) {\n    return this.request('get', '/upload/files', {\n      params\n    });\n  }\n  /**\n   * Get file\n   * @param id ID of entry\n   */\n\n\n  getFile(id) {\n    return this.request('get', \"/upload/files/\".concat(id));\n  }\n  /**\n   * Upload files\n   *\n   * ### Browser example\n   * ```js\n   * const form = new FormData();\n   * form.append('files', fileInputElement.files[0], 'file-name.ext');\n   * form.append('files', fileInputElement.files[1], 'file-2-name.ext');\n   * const files = await strapi.upload(form);\n   * ```\n   *\n   * ### Node.js example\n   * ```js\n   * const FormData = require('form-data');\n   * const fs = require('fs');\n   * const form = new FormData();\n   * form.append('files', fs.createReadStream('./file-name.ext'), 'file-name.ext');\n   * const files = await strapi.upload(form, {\n   *   headers: form.getHeaders()\n   * });\n   * ```\n   *\n   * @param data FormData\n   * @param requestConfig\n   */\n\n\n  upload(data, requestConfig) {\n    return this.request('post', '/upload', Object.assign({\n      data\n    }, requestConfig));\n  }\n  /**\n   * Set token on Axios configuration\n   * @param token Retrieved by register or login\n   */\n\n\n  setToken(token, comesFromStorage) {\n    this.axios.defaults.headers.common.Authorization = 'Bearer ' + token;\n\n    if (this.isBrowser() && !comesFromStorage) {\n      if (this.storeConfig.localStorage) {\n        window.localStorage.setItem(this.storeConfig.localStorage.key, JSON.stringify(token));\n      }\n\n      if (this.storeConfig.cookie) {\n        Cookies.set(this.storeConfig.cookie.key, token, this.storeConfig.cookie.options);\n      }\n    }\n  }\n  /**\n   * Remove token from Axios configuration\n   */\n\n\n  clearToken() {\n    delete this.axios.defaults.headers.common.Authorization;\n\n    if (this.isBrowser()) {\n      if (this.storeConfig.localStorage) {\n        window.localStorage.removeItem(this.storeConfig.localStorage.key);\n      }\n\n      if (this.storeConfig.cookie) {\n        Cookies.remove(this.storeConfig.cookie.key, this.storeConfig.cookie.options);\n      }\n    }\n  }\n  /**\n   * Check if it runs on browser\n   */\n\n\n  isBrowser() {\n    return typeof window !== 'undefined';\n  }\n\n}\n\nexports.default = Strapi;","map":null,"metadata":{},"sourceType":"script"}