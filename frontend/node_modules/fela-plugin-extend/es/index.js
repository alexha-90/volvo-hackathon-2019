import { isObject, arrayEach, objectEach } from 'fela-utils';
import assignStyle from 'css-in-js-utils/lib/assignStyle';

function extendStyle(style, extension, extendPlugin, type, renderer) {
  var merge = renderer._mergeStyle || assignStyle;

  // extend conditional style objects
  if (extension.hasOwnProperty('condition')) {
    if (extension.condition) {
      merge(style, extendPlugin(extension.style, type, renderer));
    }
  } else {
    // extend basic style objects
    merge(style, extension);
  }
}

function extend(style, type, renderer) {
  objectEach(style, function (value, property) {
    if (property === 'extend') {
      var extensions = [].concat(value);

      arrayEach(extensions, function (extension) {
        return extendStyle(style, extension, extend, type, renderer);
      });
      delete style[property];
    } else if (isObject(value)) {
      // support nested extend as well
      style[property] = extend(value, type, renderer);
    }
  });

  return style;
}

export default (function () {
  return extend;
});