'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _handlers;

exports.default = clusterCache;

var _applyMediaRulesInOrder = require('./applyMediaRulesInOrder');

var _applyMediaRulesInOrder2 = _interopRequireDefault(_applyMediaRulesInOrder);

var _generateCSSRule = require('./generateCSSRule');

var _generateCSSRule2 = _interopRequireDefault(_generateCSSRule);

var _objectReduce = require('./objectReduce');

var _objectReduce2 = _interopRequireDefault(_objectReduce);

var _styleTypes = require('./styleTypes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var handlers = (_handlers = {}, _defineProperty(_handlers, _styleTypes.RULE_TYPE, function (cluster, _ref) {
  var selector = _ref.selector,
      declaration = _ref.declaration,
      support = _ref.support,
      media = _ref.media;

  var cssRule = (0, _generateCSSRule2.default)(selector, declaration, support);

  if (media) {
    if (!cluster.mediaRules[media]) {
      cluster.mediaRules[media] = '';
    }

    cluster.mediaRules[media] += cssRule;
  } else {
    cluster.rules += cssRule;
  }
}), _defineProperty(_handlers, _styleTypes.FONT_TYPE, function (cluster, _ref2) {
  var fontFace = _ref2.fontFace;

  cluster.fontFaces += fontFace;
}), _defineProperty(_handlers, _styleTypes.KEYFRAME_TYPE, function (cluster, _ref3) {
  var keyframe = _ref3.keyframe;

  cluster.keyframes += keyframe;
}), _defineProperty(_handlers, _styleTypes.STATIC_TYPE, function (cluster, _ref4) {
  var css = _ref4.css,
      selector = _ref4.selector;

  if (selector) {
    cluster.statics += (0, _generateCSSRule2.default)(selector, css);
  } else {
    cluster.statics += css;
  }
}), _handlers);

function clusterCache(cache) {
  var mediaQueryOrder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var mediaRules = (0, _applyMediaRulesInOrder2.default)(mediaQueryOrder);

  return (0, _objectReduce2.default)(cache, function (cluster, entry, key) {
    var handler = handlers[entry.type];

    if (handler) {
      handler(cluster, entry);
    }

    return cluster;
  }, {
    mediaRules: mediaRules,
    fontFaces: '',
    statics: '',
    keyframes: '',
    rules: ''
  });
}