"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Box = Box;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactFela = require("react-fela");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var style = {
  display: "flex",
  flexDirection: "column",
  flexGrow: 0,
  flexShrink: 1,
  flexBasis: "auto",
  alignSelf: "stretch"
};

function Box(_ref) {
  var children = _ref.children,
      className = _ref.className,
      innerRef = _ref.innerRef,
      _ref$as = _ref.as,
      As = _ref$as === void 0 ? "div" : _ref$as,
      extend = _ref.extend,
      props = _objectWithoutProperties(_ref, ["children", "className", "innerRef", "as", "extend"]);

  var _useFela = (0, _reactFela.useFela)(props),
      css = _useFela.css;

  return _react.default.createElement(As, _extends({}, props, {
    ref: innerRef,
    className: css(style, extend) + (className ? " " + className : "")
  }), children);
}

Box.propTypes = {
  /** Any valid React element, function, or a string specifying a name for an HTML element */
  as: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element, _propTypes.default.func]),

  /** An object containing valid CSS style declarations */
  extend: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func, _propTypes.default.array]),

  /** A JSX node */
  children: _propTypes.default.node,

  /** React DOM ref object or fn to be passed through to the DOM element **/
  innerRef: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func])
};