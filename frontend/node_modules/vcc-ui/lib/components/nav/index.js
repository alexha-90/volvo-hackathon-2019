"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Nav = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactFela = require("react-fela");

var _block = require("../block");

var _getThemeStyle = require("../../get-theme-style");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var hideOnScrollOffsetTop = 80;

var navStyle = function navStyle(_ref) {
  var theme = _ref.theme,
      sticky = _ref.sticky,
      hideOnScroll = _ref.hideOnScroll,
      isVisible = _ref.isVisible;
  return {
    position: "relative",
    zIndex: 10,
    width: "100%",
    background: theme.colors.white,
    boxSizing: "border-box",
    ":before": {
      content: "''",
      display: "block",
      background: theme.colors.grey7,
      height: 1,
      outline: "none",
      position: "absolute",
      left: 0,
      right: 0,
      zIndex: -1,
      bottom: 0
    },
    extend: [{
      condition: sticky,
      style: {
        position: "fixed",
        top: 0,
        left: 0
      }
    }, {
      condition: hideOnScroll,
      style: {
        transition: "transform 200ms ease-out"
      }
    }, {
      condition: !isVisible,
      style: {
        transform: "translateY(-100%)"
      }
    }]
  };
};

var NavComponent =
/*#__PURE__*/
function (_React$Component) {
  _inherits(NavComponent, _React$Component);

  function NavComponent(props) {
    var _this;

    _classCallCheck(this, NavComponent);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(NavComponent).call(this, props));
    _this.state = {
      isVisible: true
    };
    _this.toggleVisibility = _this.toggleVisibility.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(NavComponent, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.hideOnScroll) {
        window.addEventListener("scroll", this.toggleVisibility);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.hideOnScroll) {
        window.removeEventListener("scroll", this.toggleVisibility);
      }
    }
  }, {
    key: "toggleVisibility",
    value: function toggleVisibility() {
      var isVisible = this.state.isVisible;
      window.scrollY > this.previousScrollY ? isVisible && window.scrollY > hideOnScrollOffsetTop && this.setState({
        isVisible: false
      }) : !isVisible && this.setState({
        isVisible: true
      });
      this.previousScrollY = window.scrollY;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          sticky = _this$props.sticky,
          hideOnScroll = _this$props.hideOnScroll,
          children = _this$props.children,
          theme = _this$props.theme;
      var isVisible = this.state.isVisible;
      var styleProps = {
        sticky: sticky,
        hideOnScroll: hideOnScroll,
        isVisible: isVisible,
        theme: theme
      };
      return _react.default.createElement(_block.Block, {
        as: "nav",
        extend: [navStyle(styleProps), (0, _getThemeStyle.getThemeStyle)("nav", theme, styleProps)]
      }, children);
    }
  }]);

  return NavComponent;
}(_react.default.Component);

NavComponent.propTypes = {
  /** Automatically hide the sticky navigation if the user starts scrolling */
  hideOnScroll: _propTypes.default.bool,

  /** Make the navigation stick to the top of the viewport */
  sticky: _propTypes.default.bool
};
NavComponent.defaultProps = {
  hideOnScroll: false,
  sticky: false
};
NavComponent.displayName = "Nav";
var Nav = (0, _reactFela.withTheme)(NavComponent);
exports.Nav = Nav;