"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabNavItem = TabNavItem;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactFela = require("react-fela");

var _click = require("../click");

var _tabNav = require("../tab-nav");

var _getThemeStyle = require("../../get-theme-style");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var styles = function styles(_ref) {
  var isActive = _ref.isActive,
      reverseOut = _ref.reverseOut,
      hasLineTransition = _ref.hasLineTransition,
      _ref$theme$colors = _ref.theme.colors,
      grey1 = _ref$theme$colors.grey1,
      primary = _ref$theme$colors.primary,
      white = _ref$theme$colors.white;
  return {
    display: "inline-flex",
    alignItems: "center",
    color: reverseOut ? white : grey1,
    fontSize: 15,
    height: 55,
    textAlign: "left",
    fontWeight: 200,
    letterSpacing: 0.3,
    margin: "0 20px 0 0",
    backgroundColor: reverseOut ? grey1 : "none",
    ":last-child": {
      margin: 0
    },
    transition: "color 200ms ease-out",
    ":hover": {
      color: reverseOut ? white : primary
    },
    ":focus": {
      outline: "none",
      color: reverseOut ? white : primary
    },
    extend: [{
      condition: isActive,
      style: {
        color: reverseOut ? white : primary
      }
    }, {
      condition: !hasLineTransition,
      style: {
        borderBottom: "3px solid transparent",
        ":hover": {
          borderBottom: "3px solid ".concat(reverseOut ? white : primary)
        },
        ":focus": {
          borderBottom: "3px solid ".concat(reverseOut ? white : primary)
        }
      }
    }, {
      condition: !hasLineTransition && isActive,
      style: {
        borderBottom: "3px solid ".concat(reverseOut ? white : primary)
      }
    }]
  };
};

function TabNavItem(_ref2) {
  var children = _ref2.children,
      index = _ref2.index,
      isActive = _ref2.isActive,
      variant = _ref2.variant,
      props = _objectWithoutProperties(_ref2, ["children", "index", "isActive", "variant"]);

  var _useFela = (0, _reactFela.useFela)(),
      theme = _useFela.theme;

  var reverseOut = variant === "dark";

  var _useContext = (0, _react.useContext)(_tabNav.LineTransitionContext),
      updateDimensions = _useContext.updateDimensions;

  var ref = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    if (updateDimensions && ref.current) {
      var _ref3 = ref.current ? ref.current.getBoundingClientRect() : {
        width: 0
      },
          width = _ref3.width;

      var x = ref.current ? ref.current.offsetLeft : 0;
      updateDimensions(index, {
        width: width,
        x: x
      });
    }
  }, []);
  var styleProps = {
    isActive: isActive,
    reverseOut: reverseOut,
    hasLineTransition: !!updateDimensions,
    theme: theme
  };

  if (styleProps.hasLineTransition && typeof index !== "number") {
    // Index property is passed down only to direct descendants of <TabNav> and is required for line transitions to work as intended.
    // If <TabNavItem>s are not direct descendants of <TabNav> an index will need to be passed down manually.
    // eslint-disable-next-line no-console
    console.warn("TabNavItem is not a direct descendant of TabNav. Please provide an index to each TabNavItem to enable line transitions.");
    return null;
  }

  return _react.default.createElement(_click.Click, _extends({
    extend: _objectSpread({}, styles(styleProps), (0, _getThemeStyle.getThemeStyle)("tabNavItem", theme, styleProps))
  }, props, {
    innerRef: ref
  }), children);
}

TabNavItem.propTypes = {
  children: _propTypes.default.node,

  /** Indicate if the TabNavItem is in an active state */
  isActive: _propTypes.default.bool,

  /** Dark text on light background, or vice versa */
  variant: _propTypes.default.oneOf(["light", "dark"])
};
TabNavItem.defaultProps = {
  isActive: false,
  variant: "light"
};