function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from "react";
import { TextInput, TEXT_INPUT_TYPES } from ".";
import volvoTheme from "../../themes/volvo";
import createSnapshot from "../../test/create-snapshot";
describe("<TextInput /> snapshot tests", function () {
  var textInputProps = {
    onChange: function onChange() {},
    value: ""
  };
  it("renders <TextInput /> component correctly with default props", function () {
    var snapshot = createSnapshot(React.createElement(TextInput, textInputProps));
    expect(snapshot).toMatchSnapshot();
  });
  it("renders <TextInput /> component correctly with different type: password", function () {
    var snapshot = createSnapshot(React.createElement(TextInput, _extends({
      type: TEXT_INPUT_TYPES.PASSWORD
    }, textInputProps)));
    expect(snapshot).toMatchSnapshot();
  });
  it("renders <TextInput /> component correctly with theme", function () {
    var theme = _objectSpread({}, volvoTheme, {
      styles: {
        input: {
          background: "yellow"
        }
      }
    });

    var snapshot = createSnapshot(React.createElement(TextInput, textInputProps), theme);
    expect(snapshot).toMatchSnapshot();
  });
  it("verifies the correct and supported input text types", function () {
    expect(TEXT_INPUT_TYPES.PASSWORD).toEqual("password");
    expect(TEXT_INPUT_TYPES.EMAIL).toEqual("email");
    expect(TEXT_INPUT_TYPES.TELEPHONE).toEqual("tel");
    expect(TEXT_INPUT_TYPES.SEARCH).toEqual("search");
    expect(TEXT_INPUT_TYPES.TEXT).toEqual("text");
    expect(TEXT_INPUT_TYPES.NUMBER).toEqual("number");
    expect(Object.keys(TEXT_INPUT_TYPES).length).toEqual(6);
  });
});