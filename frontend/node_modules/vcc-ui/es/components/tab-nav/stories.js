function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useState } from "react";
import { storiesOf } from "@storybook/react";
import { object } from "@storybook/addon-knobs";
import { ThemeProvider } from "../../theme-provider";
import { TabNav } from "./";
import { TabNavItem } from "../tab-nav-item";
import { Block } from "../block";
import volvoTheme from "../../themes/volvo";
storiesOf("Navigation/TabNav", module).addWithJSX("default (textAlign: center)", function () {
  return React.createElement(Block, null, React.createElement(TabNav, null, React.createElement(TabNavItem, {
    isActive: true
  }, "Crossover/Wagon"), React.createElement(TabNavItem, null, "Sedan"), React.createElement(TabNavItem, null, "Hybrid")));
}).addWithJSX("default as links (textAlign: center)", function () {
  return React.createElement(Block, null, React.createElement(TabNav, null, React.createElement(TabNavItem, {
    isActive: true,
    href: "somelink"
  }, "Crossover/Wagon"), React.createElement(TabNavItem, {
    href: "somelink"
  }, "Sedan"), React.createElement(TabNavItem, {
    href: "somelink"
  }, "Hybrid")));
}).addWithJSX("default: (textAlign: center) with back link", function () {
  return React.createElement(Block, null, React.createElement(TabNav, {
    backButton: {
      text: "Go back",
      href: "/href"
    },
    showBackButtonOn: ["s", "m", "l"]
  }, React.createElement(TabNavItem, {
    isActive: true
  }, "Crossover/Wagon"), React.createElement(TabNavItem, null, "Sedan"), React.createElement(TabNavItem, null, "Hybrid")));
}).addWithJSX("default: (textAlign: center) with back button", function () {
  return React.createElement(Block, null, React.createElement(TabNav, {
    backButton: {
      text: "Go back",
      clickHandler: function clickHandler(e) {
        e.preventDefault();
      }
    },
    showBackButtonOn: ["s", "m", "l"]
  }, React.createElement(TabNavItem, {
    isActive: true
  }, "Crossover/Wagon"), React.createElement(TabNavItem, null, "Sedan"), React.createElement(TabNavItem, null, "Hybrid")));
}).addWithJSX("dark variant", function () {
  return React.createElement(Block, null, React.createElement(TabNav, {
    variant: "dark"
  }, React.createElement(TabNavItem, {
    variant: "dark",
    isActive: true
  }, "Crossover/Wagon"), React.createElement(TabNavItem, {
    variant: "dark"
  }, "Sedan"), React.createElement(TabNavItem, {
    variant: "dark"
  }, "Hybrid")));
}).addWithJSX("dark variant with back button", function () {
  return React.createElement(Block, null, React.createElement(TabNav, {
    variant: "dark",
    backButton: {
      text: "Go back",
      href: "/href",
      clickHandler: function clickHandler(e) {
        e.preventDefault();
      }
    }
  }, React.createElement(TabNavItem, {
    variant: "dark",
    isActive: true
  }, "Crossover/Wagon"), React.createElement(TabNavItem, {
    variant: "dark"
  }, "Sedan"), React.createElement(TabNavItem, {
    variant: "dark"
  }, "Hybrid")));
}).addWithJSX("textAlign: left", function () {
  return React.createElement(Block, null, React.createElement(TabNav, {
    textAlign: "left"
  }, React.createElement(TabNavItem, {
    isActive: true
  }, "Crossover/Wagon"), React.createElement(TabNavItem, null, "Sedan"), React.createElement(TabNavItem, null, "Hybrid")));
}).addWithJSX("left-aligned with back button", function () {
  return React.createElement(Block, null, React.createElement(TabNav, {
    textAlign: "left",
    backButton: {
      text: "Go back",
      href: "/href"
    }
  }, React.createElement(TabNavItem, {
    isActive: true
  }, "Crossover/Wagon"), React.createElement(TabNavItem, null, "Sedan"), React.createElement(TabNavItem, null, "Hybrid")));
}).addWithJSX("with theme", function () {
  var label = "Custom theme";

  var defaultValue = _objectSpread({}, volvoTheme, {
    nav: {
      backgroundColor: "pink",
      color: "#000"
    }
  });

  var defaultThemePropsConfig = object(label, defaultValue);
  return React.createElement(ThemeProvider, {
    theme: defaultThemePropsConfig
  }, React.createElement(Block, null, React.createElement(TabNav, null, React.createElement(TabNavItem, {
    isActive: true
  }, "Crossover/Wagon"), React.createElement(TabNavItem, null, "Sedan"), React.createElement(TabNavItem, null, "Hybrid"))));
}).addWithJSX("with line transition enabled", function () {
  return React.createElement(WithLineTransitionEnabled, null);
});

var WithLineTransitionEnabled = function WithLineTransitionEnabled() {
  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      activeIndex = _useState2[0],
      setActiveIndex = _useState2[1];

  var items = ["SUV", "Crossover/Wagon", "Sedan", "Hybrid"];
  return React.createElement(Block, null, React.createElement(TabNav, {
    enableLineTransition: true
  }, items.map(function (item, i) {
    return React.createElement(TabNavItem, {
      isActive: i === activeIndex,
      onClick: function onClick() {
        return setActiveIndex(i);
      },
      key: i
    }, item);
  })));
};