function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import PropTypes from "prop-types";
import React from "react";
import { useFela } from "react-fela";
var style = {
  display: "inline"
};
export function Inline(_ref) {
  var children = _ref.children,
      className = _ref.className,
      innerRef = _ref.innerRef,
      _ref$as = _ref.as,
      As = _ref$as === void 0 ? "span" : _ref$as,
      extend = _ref.extend,
      props = _objectWithoutProperties(_ref, ["children", "className", "innerRef", "as", "extend"]);

  var _useFela = useFela(props),
      css = _useFela.css;

  return React.createElement(As, _extends({}, props, {
    ref: innerRef,
    className: css(style, extend) + (className ? " " + className : "")
  }), children);
}
Inline.propTypes = {
  /** Any valid React element, function, or a string specifying a name for an HTML element */
  as: PropTypes.oneOfType([PropTypes.string, PropTypes.element, PropTypes.func]),

  /** An object containing valid CSS style declarations */
  extend: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.array]),

  /** A JSX node */
  children: PropTypes.node,

  /** React DOM ref object or fn to be passed through to the DOM element **/
  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func])
};