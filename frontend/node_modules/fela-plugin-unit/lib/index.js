'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = unit;

var _isUnitlessProperty = require('css-in-js-utils/lib/isUnitlessProperty');

var _isUnitlessProperty2 = _interopRequireDefault(_isUnitlessProperty);

var _isobject = require('isobject');

var _isobject2 = _interopRequireDefault(_isobject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function addUnitIfNeeded(property, value, propertyUnit) {
  var valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  /* eslint-disable eqeqeq */
  if ((valueType === 'number' || valueType === 'string' && value == parseFloat(value)) && value != 0) {
    value += propertyUnit;
  }
  /* eslint-enable */
  return value;
}

function addUnit(style, defaultUnit, propertyMap, isUnitlessProperty) {
  var _loop = function _loop(property) {
    if (!isUnitlessProperty(property)) {
      var cssValue = style[property];
      var propertyUnit = propertyMap[property] || defaultUnit;

      if ((0, _isobject2.default)(cssValue)) {
        style[property] = addUnit(cssValue, defaultUnit, propertyMap, isUnitlessProperty);
      } else if (Array.isArray(cssValue)) {
        style[property] = cssValue.map(function (val) {
          return addUnitIfNeeded(property, val, propertyUnit);
        });
      } else {
        style[property] = addUnitIfNeeded(property, cssValue, propertyUnit);
      }
    }
  };

  for (var property in style) {
    _loop(property);
  }

  return style;
}

function unit() {
  var defaultUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'px';
  var propertyMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var isUnitlessProperty = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _isUnitlessProperty2.default;

  return function (style) {
    return addUnit(style, defaultUnit, propertyMap, isUnitlessProperty);
  };
}