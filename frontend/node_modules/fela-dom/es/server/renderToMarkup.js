var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import arrayReduce from 'fast-loops/lib/arrayReduce';
import objectReduce from 'fast-loops/lib/objectReduce';
import { clusterCache, cssifySupportRules, sheetMap, RULE_TYPE } from 'fela-utils';

import createStyleTagMarkup from './createStyleTagMarkup';
import getRehydrationIndex from './getRehydrationIndex';

export default function renderToMarkup(renderer) {
  var cacheCluster = clusterCache(renderer.cache, renderer.mediaQueryOrder, renderer.supportQueryOrder, renderer.ruleOrder);

  var rehydrationIndex = getRehydrationIndex(renderer);

  var styleMarkup = objectReduce(sheetMap, function (markup, type, key) {
    if (cacheCluster[key].length > 0) {
      markup += createStyleTagMarkup(cacheCluster[key], type, '', rehydrationIndex);
    }

    return markup;
  }, '');

  var support = cssifySupportRules(cacheCluster.supportRules);

  if (support) {
    styleMarkup += createStyleTagMarkup(support, RULE_TYPE, '', rehydrationIndex, true);
  }

  var mediaKeys = Object.keys(_extends({}, cacheCluster.supportMediaRules, cacheCluster.mediaRules));

  return arrayReduce(mediaKeys, function (markup, media) {
    // basic media query rules
    if (cacheCluster.mediaRules[media] && cacheCluster.mediaRules[media].length > 0) {
      markup += createStyleTagMarkup(cacheCluster.mediaRules[media], RULE_TYPE, media, rehydrationIndex);
    }

    // support media rules
    if (cacheCluster.supportMediaRules[media]) {
      var mediaSupport = cssifySupportRules(cacheCluster.supportMediaRules[media]);

      if (mediaSupport.length > 0) {
        markup += createStyleTagMarkup(mediaSupport, RULE_TYPE, media, rehydrationIndex, true);
      }
    }

    return markup;
  }, styleMarkup);
}