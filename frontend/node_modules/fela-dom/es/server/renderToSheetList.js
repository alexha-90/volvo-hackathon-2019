var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import arrayReduce from 'fast-loops/lib/arrayReduce';
import objectReduce from 'fast-loops/lib/objectReduce';
import { clusterCache, cssifySupportRules, sheetMap, RULE_TYPE, KEYFRAME_TYPE, FONT_TYPE, STATIC_TYPE } from 'fela-utils';

import getRehydrationIndex from './getRehydrationIndex';

export default function renderToSheetList(renderer) {
  var cacheCluster = clusterCache(renderer.cache, renderer.mediaQueryOrder, renderer.supportQueryOrder, renderer.ruleOrder);

  var rehydrationIndex = getRehydrationIndex(renderer);

  var sheetList = objectReduce(sheetMap, function (list, type, key) {
    if (cacheCluster[key].length > 0) {
      list.push({
        css: cacheCluster[key],
        rehydration: rehydrationIndex,
        type: type
      });
    }

    return list;
  }, []);

  var support = cssifySupportRules(cacheCluster.supportRules);

  if (support) {
    sheetList.push({
      css: support,
      type: RULE_TYPE,
      rehydration: rehydrationIndex,
      support: true
    });
  }

  var mediaKeys = Object.keys(_extends({}, cacheCluster.supportMediaRules, cacheCluster.mediaRules));

  return arrayReduce(mediaKeys, function (list, media) {
    // basic media query rules
    if (cacheCluster.mediaRules[media] && cacheCluster.mediaRules[media].length > 0) {
      list.push({
        css: cacheCluster.mediaRules[media],
        type: RULE_TYPE,
        rehydration: rehydrationIndex,
        media: media
      });
    }

    // support media rules
    if (cacheCluster.supportMediaRules[media]) {
      var mediaSupport = cssifySupportRules(cacheCluster.supportMediaRules[media]);

      if (mediaSupport.length > 0) {
        list.push({
          css: mediaSupport,
          type: RULE_TYPE,
          rehydration: rehydrationIndex,
          support: true,
          media: media
        });
      }
    }

    return list;
  }, sheetList);
}