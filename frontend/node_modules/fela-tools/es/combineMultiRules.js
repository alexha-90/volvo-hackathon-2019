var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import objectReduce from 'fast-loops/lib/objectReduce';
import arrayReduce from 'fast-loops/lib/arrayReduce';

import { combineRules } from 'fela';

function safeRule(ruleOrObject) {
  return typeof ruleOrObject === 'function' ? ruleOrObject : function () {
    return ruleOrObject;
  };
}

export default function combineMultiRules() {
  for (var _len = arguments.length, multiRules = Array(_len), _key = 0; _key < _len; _key++) {
    multiRules[_key] = arguments[_key];
  }

  return function (props, renderer) {
    return arrayReduce(multiRules, function (resultStyleMap, multiRule) {
      return _extends({}, resultStyleMap, objectReduce(safeRule(multiRule)(props, renderer), function (styleMap, rule, name) {
        return _extends({}, styleMap, _defineProperty({}, name, resultStyleMap[name] ? combineRules(resultStyleMap[name], safeRule(rule)) : safeRule(rule)));
      }, {}));
    }, {});
  };
}