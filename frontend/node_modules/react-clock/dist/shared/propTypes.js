'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isMarkWidth = exports.isMarkLength = exports.isHandWidth = exports.isOppositeHandLength = exports.isHandLength = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _utils = require('./utils');

var isHandLength = exports.isHandLength = function isHandLength(props, propName, componentName) {
  var length = props[propName];

  if ((0, _utils.isDefined)(length)) {
    if (typeof length !== 'number') {
      return new Error('Invalid prop `' + propName + '` of type `' + (typeof length === 'undefined' ? 'undefined' : _typeof(length)) + '` supplied to `' + componentName + '`, expected `number`.');
    }

    if (length < 0 || length > 100) {
      return new Error('Invalid prop `' + propName + '` of type `' + (typeof length === 'undefined' ? 'undefined' : _typeof(length)) + '` supplied to `' + componentName + '`, length must be between 0 and 100.');
    }
  }

  // Everything is fine
  return null;
};

var isOppositeHandLength = exports.isOppositeHandLength = function isOppositeHandLength(props, propName, componentName) {
  var length = props[propName];

  if ((0, _utils.isDefined)(length)) {
    if (typeof length !== 'number') {
      return new Error('Invalid prop `' + propName + '` of type `' + (typeof length === 'undefined' ? 'undefined' : _typeof(length)) + '` supplied to `' + componentName + '`, expected `number`.');
    }

    if (length < -100 || length > 100) {
      return new Error('Invalid prop `' + propName + '` of type `' + (typeof length === 'undefined' ? 'undefined' : _typeof(length)) + '` supplied to `' + componentName + '`, length must be between -100 and 100.');
    }
  }

  // Everything is fine
  return null;
};

var isHandWidth = exports.isHandWidth = function isHandWidth(props, propName, componentName) {
  var width = props[propName];

  if ((0, _utils.isDefined)(width)) {
    if (typeof width !== 'number') {
      return new Error('Invalid prop `' + propName + '` of type `' + (typeof width === 'undefined' ? 'undefined' : _typeof(width)) + '` supplied to `' + componentName + '`, expected `number`.');
    }

    if (width < 0) {
      return new Error('Invalid prop `' + propName + '` of type `' + (typeof width === 'undefined' ? 'undefined' : _typeof(width)) + '` supplied to `' + componentName + '`, width must be greater or equal to 0.');
    }
  }

  // Everything is fine
  return null;
};

var isMarkLength = exports.isMarkLength = isHandLength;

var isMarkWidth = exports.isMarkWidth = isHandWidth;