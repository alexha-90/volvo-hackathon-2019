'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var hourOptionalSecondsRegExp = /^(([0-1])?[0-9]|2[0-3]):[0-5][0-9](:([0-5][0-9]))?$/;
var hourRegExp = /^(([0-1])?[0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9])$/;

var getHours = exports.getHours = function getHours(date) {
  if (date instanceof Date) {
    return date.getHours();
  }

  if (typeof date === 'string' && hourOptionalSecondsRegExp.test(date)) {
    var _date$split = date.split(':'),
        _date$split2 = _slicedToArray(_date$split, 1),
        hourString = _date$split2[0];

    return parseInt(hourString, 10);
  }

  throw new Error('Failed to get hours from date: ' + date + '.');
};

var getMinutes = exports.getMinutes = function getMinutes(date) {
  if (date instanceof Date) {
    return date.getMinutes();
  }

  if (typeof date === 'string' && hourOptionalSecondsRegExp.test(date)) {
    var _date$split3 = date.split(':'),
        _date$split4 = _slicedToArray(_date$split3, 2),
        minuteString = _date$split4[1];

    return parseInt(minuteString, 10);
  }

  throw new Error('Failed to get minutes from date: ' + date + '.');
};

var getSeconds = exports.getSeconds = function getSeconds(date) {
  if (date instanceof Date) {
    return date.getSeconds();
  }

  if (typeof date === 'string') {
    if (hourRegExp.test(date)) {
      var _date$split5 = date.split(':'),
          _date$split6 = _slicedToArray(_date$split5, 3),
          secondString = _date$split6[2];

      return parseInt(secondString, 10);
    } else if (hourOptionalSecondsRegExp.test(date)) {
      return 0;
    }
  }

  throw new Error('Failed to get seconds from date: ' + date + '.');
};