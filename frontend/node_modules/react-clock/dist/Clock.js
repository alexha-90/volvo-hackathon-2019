'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _mergeClassNames = require('merge-class-names');

var _mergeClassNames2 = _interopRequireDefault(_mergeClassNames);

var _Hand = require('./Hand');

var _Hand2 = _interopRequireDefault(_Hand);

var _Mark = require('./Mark');

var _Mark2 = _interopRequireDefault(_Mark);

var _dates = require('./shared/dates');

var _propTypes3 = require('./shared/propTypes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Clock = function (_Component) {
  _inherits(Clock, _Component);

  function Clock() {
    _classCallCheck(this, Clock);

    return _possibleConstructorReturn(this, (Clock.__proto__ || Object.getPrototypeOf(Clock)).apply(this, arguments));
  }

  _createClass(Clock, [{
    key: 'renderMinuteMarks',
    value: function renderMinuteMarks() {
      if (!this.props.renderMinuteMarks) {
        return null;
      }

      var _props = this.props,
          minuteMarksLength = _props.minuteMarksLength,
          minuteMarksWidth = _props.minuteMarksWidth,
          renderHourMarks = _props.renderHourMarks;


      var minuteMarks = [];
      for (var i = 1; i <= 60; i += 1) {
        var isHourMark = renderHourMarks && !(i % 5);

        if (!isHourMark) {
          minuteMarks.push(_react2.default.createElement(_Mark2.default, {
            angle: i * 6,
            key: 'minute_' + i,
            length: minuteMarksLength,
            name: 'minute',
            width: minuteMarksWidth
          }));
        }
      }
      return minuteMarks;
    }
  }, {
    key: 'renderHourMarks',
    value: function renderHourMarks() {
      if (!this.props.renderHourMarks) {
        return null;
      }

      var _props2 = this.props,
          hourMarksLength = _props2.hourMarksLength,
          hourMarksWidth = _props2.hourMarksWidth,
          renderNumbers = _props2.renderNumbers;


      var hourMarks = [];
      for (var i = 1; i <= 12; i += 1) {
        hourMarks.push(_react2.default.createElement(_Mark2.default, {
          angle: i * 30,
          key: 'hour_' + i,
          number: renderNumbers ? i : null,
          length: hourMarksLength,
          name: 'hour',
          width: hourMarksWidth
        }));
      }
      return hourMarks;
    }
  }, {
    key: 'renderFace',
    value: function renderFace() {
      return _react2.default.createElement(
        'div',
        { className: 'react-clock__face' },
        this.renderMinuteMarks(),
        this.renderHourMarks()
      );
    }
  }, {
    key: 'renderHourHand',
    value: function renderHourHand() {
      var _props3 = this.props,
          hourHandWidth = _props3.hourHandWidth,
          hourHandLength = _props3.hourHandLength,
          hourHandOppositeLength = _props3.hourHandOppositeLength,
          value = _props3.value;


      var angle = value ? (0, _dates.getHours)(value) * 30 + (0, _dates.getMinutes)(value) / 2 + (0, _dates.getSeconds)(value) / 600 : 0;

      return _react2.default.createElement(_Hand2.default, {
        angle: angle,
        name: 'hour',
        length: hourHandLength,
        oppositeLength: hourHandOppositeLength,
        width: hourHandWidth
      });
    }
  }, {
    key: 'renderMinuteHand',
    value: function renderMinuteHand() {
      if (!this.props.renderMinuteHand) {
        return null;
      }

      var _props4 = this.props,
          minuteHandWidth = _props4.minuteHandWidth,
          minuteHandLength = _props4.minuteHandLength,
          minuteHandOppositeLength = _props4.minuteHandOppositeLength,
          value = _props4.value;


      var angle = value ? (0, _dates.getHours)(value) * 360 + (0, _dates.getMinutes)(value) * 6 + (0, _dates.getSeconds)(value) / 10 : 0;

      return _react2.default.createElement(_Hand2.default, {
        angle: angle,
        name: 'minute',
        length: minuteHandLength,
        oppositeLength: minuteHandOppositeLength,
        width: minuteHandWidth
      });
    }
  }, {
    key: 'renderSecondHand',
    value: function renderSecondHand() {
      if (!this.props.renderSecondHand) {
        return null;
      }

      var _props5 = this.props,
          secondHandWidth = _props5.secondHandWidth,
          secondHandLength = _props5.secondHandLength,
          secondHandOppositeLength = _props5.secondHandOppositeLength,
          value = _props5.value;


      var angle = value ? (0, _dates.getMinutes)(value) * 360 + (0, _dates.getSeconds)(value) * 6 : 0;

      return _react2.default.createElement(_Hand2.default, {
        name: 'second',
        angle: angle,
        length: secondHandLength,
        oppositeLength: secondHandOppositeLength,
        width: secondHandWidth
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props6 = this.props,
          size = _props6.size,
          value = _props6.value;


      return _react2.default.createElement(
        'time',
        {
          className: (0, _mergeClassNames2.default)('react-clock', this.props.className),
          dateTime: value instanceof Date ? value.toISOString() : value,
          style: {
            width: size + 'px',
            height: size + 'px'
          }
        },
        this.renderFace(),
        this.renderHourHand(),
        this.renderMinuteHand(),
        this.renderSecondHand()
      );
    }
  }]);

  return Clock;
}(_react.Component);

exports.default = Clock;


Clock.defaultProps = {
  hourHandLength: 50,
  hourHandWidth: 4,
  hourMarksLength: 10,
  hourMarksWidth: 3,
  minuteHandLength: 70,
  minuteHandWidth: 2,
  minuteMarksLength: 6,
  minuteMarksWidth: 1,
  renderHourMarks: true,
  renderMinuteHand: true,
  renderMinuteMarks: true,
  renderSecondHand: true,
  secondHandLength: 90,
  secondHandWidth: 1,
  size: 150
};

Clock.propTypes = {
  className: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),
  hourHandLength: _propTypes3.isHandLength,
  hourHandOppositeLength: _propTypes3.isOppositeHandLength,
  hourHandWidth: _propTypes3.isHandWidth,
  hourMarksLength: _propTypes3.isMarkLength,
  hourMarksWidth: _propTypes3.isMarkWidth,
  minuteHandLength: _propTypes3.isHandLength,
  minuteHandOppositeLength: _propTypes3.isOppositeHandLength,
  minuteHandWidth: _propTypes3.isHandWidth,
  minuteMarksLength: _propTypes3.isMarkLength,
  minuteMarksWidth: _propTypes3.isMarkWidth,
  renderHourMarks: _propTypes2.default.bool,
  renderMinuteHand: _propTypes2.default.bool,
  renderMinuteMarks: _propTypes2.default.bool,
  renderNumbers: _propTypes2.default.bool,
  renderSecondHand: _propTypes2.default.bool,
  secondHandLength: _propTypes3.isHandLength,
  secondHandOppositeLength: _propTypes3.isOppositeHandLength,
  secondHandWidth: _propTypes3.isHandWidth,
  size: _propTypes2.default.number,
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.instanceOf(Date)])
};